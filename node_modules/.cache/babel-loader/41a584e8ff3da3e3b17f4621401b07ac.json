{"ast":null,"code":"import { createAsyncThunk, createSlice, nanoid } from \"@reduxjs/toolkit\";\nconst initialState = {\n  newsData: [// {id:'1', title:'Title1', content:'dit is wat tekst 1',date:'2016-01-04 10:34:23', user:'1'},\n    // {id:'2', title:'Title2', content:'dit is wat tekst 2',date:'2016-01-04 10:34:23',user:'2'}\n  ],\n  // newsData:[],\n  status: 'idle',\n  error: null\n};\nconst url = 'https://www.vrt.be/vrtnws/nl/regio/_jcr_content/par/grid.app.json'; //api geven\n\nexport const getNews = createAsyncThunk('news/getNews', async () => {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    console.log('url data: ', data);\n    return data;\n  } catch (err) {\n    // Handle Error Here\n    console.error(err);\n  }\n\n  initialState.newsData.push();\n}); //posts object\n\nconst postsSlice = createSlice({\n  name: 'news',\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer(state, action) {\n        state.newsData.push(action.payload);\n      },\n\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            date: new Date().toISOString(),\n            user: userId\n          }\n        };\n      }\n\n    },\n\n    newsAdded(state, action) {\n      state.newsData.push(action.payload); // state:huidige state\n\n      console.log('newsAdded'); // state.push(action.payload)\n    },\n\n    postUpdated(state, action) {\n      // in action.payload.id, .title, .content\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.news.find(post => post.id === id);\n\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n\n  }\n});\nexport const {\n  postAdded,\n  postUpdated,\n  newsAdded\n} = postsSlice.actions;\nexport default postsSlice.reducer;\nexport const selectAllNews = state => state.news.newsData;\nexport const selectPostById = (state, postId) => state.news.newsData.find(post => post.id === postId);","map":{"version":3,"sources":["D:/Thomas More/Bacholer/React/Projecten/project_2/src/features/postsSlice.js"],"names":["createAsyncThunk","createSlice","nanoid","initialState","newsData","status","error","url","getNews","response","fetch","data","json","console","log","err","push","postsSlice","name","reducers","postAdded","reducer","state","action","payload","prepare","title","content","userId","id","date","Date","toISOString","user","newsAdded","postUpdated","existingPost","news","find","post","actions","selectAllNews","selectPostById","postId"],"mappings":"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","sourcesContent":["import {createAsyncThunk, createSlice, nanoid} from \"@reduxjs/toolkit\"\r\n\r\n\r\nconst initialState = {\r\n    \r\n  newsData:[\r\n    // {id:'1', title:'Title1', content:'dit is wat tekst 1',date:'2016-01-04 10:34:23', user:'1'},\r\n    // {id:'2', title:'Title2', content:'dit is wat tekst 2',date:'2016-01-04 10:34:23',user:'2'}\r\n    ],\r\n// newsData:[],\r\n    status:'idle',\r\n    error: null\r\n\r\n  \r\n}\r\nconst url='https://www.vrt.be/vrtnws/nl/regio/_jcr_content/par/grid.app.json';\r\n//api geven\r\n  \r\nexport const getNews=createAsyncThunk(\r\n    'news/getNews',\r\n    async()=>{   \r\n        try { \r\n            const response =  await fetch(url); \r\n            const data = await response.json();\r\n            console.log('url data: ',data);        \r\n            return data\r\n            \r\n           \r\n        } catch (err) {\r\n            // Handle Error Here\r\n            console.error(err);\r\n        } \r\n        \r\n        initialState.newsData.push()\r\n    }\r\n   \r\n\r\n);\r\n\r\n\r\n\r\n//posts object\r\n\r\n\r\nconst postsSlice = createSlice({\r\n    name:'news',\r\n    initialState,\r\n    reducers:{\r\n\r\n\r\n\r\n        postAdded: {\r\n            reducer(state, action){\r\n            state.newsData.push(action.payload)\r\n            },\r\n            prepare(title, content,userId){\r\n                return{\r\n                    payload:{\r\n                        id:nanoid(),\r\n                        title,\r\n                        content,\r\n                        date:new Date().toISOString(),\r\n                        user:userId\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        newsAdded(state, action){\r\n            state.newsData.push(action.payload)\r\n            // state:huidige state\r\n            console.log('newsAdded')\r\n            // state.push(action.payload)\r\n        },\r\n\r\n        postUpdated(state, action){\r\n            // in action.payload.id, .title, .content\r\n            const {id, title, content}= action.payload\r\n            const existingPost = state.news.find(post => post.id===id)\r\n\r\n            if(existingPost){\r\n                existingPost.title=title;\r\n                existingPost.content=content;\r\n            }\r\n\r\n        }\r\n    }\r\n})\r\n\r\nexport const {postAdded,postUpdated,newsAdded} = postsSlice.actions\r\nexport default postsSlice.reducer\r\n\r\nexport const selectAllNews= state =>state.news.newsData\r\nexport const selectPostById = (state, postId) =>state.news.newsData.find(post => post.id === postId)\r\n"]},"metadata":{},"sourceType":"module"}