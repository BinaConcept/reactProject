{"ast":null,"code":"import { createAsyncThunk, createSlice, nanoid } from \"@reduxjs/toolkit\";\nimport axios from 'axios';\nconst initialState = {\n  posts: [{\n    id: '1',\n    title: 'Title1',\n    content: 'dit is wat tekst 1',\n    date: '2016-01-04 10:34:23',\n    user: '1'\n  }, {\n    id: '2',\n    title: 'Title2',\n    content: 'dit is wat tekst 2',\n    date: '2016-01-04 10:34:23',\n    user: '2'\n  }],\n  status: 'idle',\n  error: null\n}; //api geven\n\nexport const getPosts = createAsyncThunk('posts/getPosts', async () => {\n  //const response= await client.get('fakeApi/posts')        \n  try {\n    const response = await axios.get('https://jsonplaceholder.typicode.com/posts');\n    console.log('url data: ', response.data);\n    return response.data;\n  } catch (err) {\n    // Handle Error Here\n    console.error(err);\n  } // const response= await axios.get('https://www.vrt.be/vrtnws/nl/regio/_jcr_content/par/grid.app.json')\n  // console.log('url data: ',response.data)\n  // return response.data;\n\n}); //posts object\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer(state, action) {\n        state.posts.push(action.payload);\n      },\n\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            date: new Date().toISOString(),\n            user: userId\n          }\n        };\n      }\n\n    },\n\n    // postAdded(state, action){\n    //     // state:huidige state\n    //     state.push(action.payload)\n    // },\n    postUpdated(state, action) {\n      // in action.payload.id, .title, .content\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.posts.find(post => post.id === id);\n\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n\n  }\n});\nexport const {\n  postAdded,\n  postUpdated\n} = postsSlice.actions;\nexport default postsSlice.reducer;\nexport const selectAllPosts = state => state.posts.posts;\nexport const selectPostById = (state, postId) => state.posts.posts.find(post => post.id === postId);","map":{"version":3,"sources":["D:/Thomas More/Bacholer/React/Projecten/project_2/src/features/postsSlice.js"],"names":["createAsyncThunk","createSlice","nanoid","axios","initialState","posts","id","title","content","date","user","status","error","getPosts","response","get","console","log","data","err","postsSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","userId","Date","toISOString","postUpdated","existingPost","find","post","actions","selectAllPosts","selectPostById","postId"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,EAAuCC,MAAvC,QAAoD,kBAApD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAC,CACJ;AAACC,IAAAA,EAAE,EAAC,GAAJ;AAASC,IAAAA,KAAK,EAAC,QAAf;AAAyBC,IAAAA,OAAO,EAAC,oBAAjC;AAAsDC,IAAAA,IAAI,EAAC,qBAA3D;AAAkFC,IAAAA,IAAI,EAAC;AAAvF,GADI,EAEJ;AAACJ,IAAAA,EAAE,EAAC,GAAJ;AAASC,IAAAA,KAAK,EAAC,QAAf;AAAyBC,IAAAA,OAAO,EAAC,oBAAjC;AAAsDC,IAAAA,IAAI,EAAC,qBAA3D;AAAiFC,IAAAA,IAAI,EAAC;AAAtF,GAFI,CADa;AAKjBC,EAAAA,MAAM,EAAC,MALU;AAMjBC,EAAAA,KAAK,EAAE;AANU,CAArB,C,CASA;;AACA,OAAO,MAAMC,QAAQ,GAACb,gBAAgB,CAClC,gBADkC,EAElC,YAAS;AACL;AACA,MAAI;AACA,UAAMc,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAN,CAAU,4CAAV,CAAvB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyBH,QAAQ,CAACI,IAAlC;AACA,WAAOJ,QAAQ,CAACI,IAAhB;AACH,GAJD,CAIE,OAAOC,GAAP,EAAY;AACV;AACAH,IAAAA,OAAO,CAACJ,KAAR,CAAcO,GAAd;AACH,GATI,CAaL;AACA;AACA;;AAEH,CAnBiC,CAA/B,C,CAsBP;;AAGA,MAAMC,UAAU,GAAGnB,WAAW,CAAC;AAC3BoB,EAAAA,IAAI,EAAC,OADsB;AAE3BjB,EAAAA,YAF2B;AAG3BkB,EAAAA,QAAQ,EAAC;AAELC,IAAAA,SAAS,EAAE;AACPC,MAAAA,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAe;AACtBD,QAAAA,KAAK,CAACpB,KAAN,CAAYsB,IAAZ,CAAiBD,MAAM,CAACE,OAAxB;AACC,OAHM;;AAIPC,MAAAA,OAAO,CAACtB,KAAD,EAAQC,OAAR,EAAgBsB,MAAhB,EAAuB;AAC1B,eAAM;AACFF,UAAAA,OAAO,EAAC;AACJtB,YAAAA,EAAE,EAACJ,MAAM,EADL;AAEJK,YAAAA,KAFI;AAGJC,YAAAA,OAHI;AAIJC,YAAAA,IAAI,EAAC,IAAIsB,IAAJ,GAAWC,WAAX,EAJD;AAKJtB,YAAAA,IAAI,EAACoB;AALD;AADN,SAAN;AASH;;AAdM,KAFN;;AAmBL;AACA;AACA;AACA;AAEAG,IAAAA,WAAW,CAACR,KAAD,EAAQC,MAAR,EAAe;AACtB;AACA,YAAM;AAACpB,QAAAA,EAAD;AAAKC,QAAAA,KAAL;AAAYC,QAAAA;AAAZ,UAAsBkB,MAAM,CAACE,OAAnC;AACA,YAAMM,YAAY,GAAGT,KAAK,CAACpB,KAAN,CAAY8B,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAAC9B,EAAL,KAAUA,EAAnC,CAArB;;AAEA,UAAG4B,YAAH,EAAgB;AACZA,QAAAA,YAAY,CAAC3B,KAAb,GAAmBA,KAAnB;AACA2B,QAAAA,YAAY,CAAC1B,OAAb,GAAqBA,OAArB;AACH;AAEJ;;AAlCI;AAHkB,CAAD,CAA9B;AAyCA,OAAO,MAAM;AAACe,EAAAA,SAAD;AAAWU,EAAAA;AAAX,IAA0Bb,UAAU,CAACiB,OAA3C;AACP,eAAejB,UAAU,CAACI,OAA1B;AAEA,OAAO,MAAMc,cAAc,GAAEb,KAAK,IAAGA,KAAK,CAACpB,KAAN,CAAYA,KAA1C;AACP,OAAO,MAAMkC,cAAc,GAAG,CAACd,KAAD,EAAQe,MAAR,KAAkBf,KAAK,CAACpB,KAAN,CAAYA,KAAZ,CAAkB8B,IAAlB,CAAuBC,IAAI,IAAIA,IAAI,CAAC9B,EAAL,KAAYkC,MAA3C,CAAzC","sourcesContent":["import {createAsyncThunk, createSlice, nanoid} from \"@reduxjs/toolkit\"\r\nimport axios from 'axios';\r\n\r\nconst initialState = {\r\n  posts:[\r\n    {id:'1', title:'Title1', content:'dit is wat tekst 1',date:'2016-01-04 10:34:23', user:'1'},\r\n    {id:'2', title:'Title2', content:'dit is wat tekst 2',date:'2016-01-04 10:34:23',user:'2'}\r\n    ],\r\n    status:'idle',\r\n    error: null\r\n}\r\n\r\n//api geven\r\nexport const getPosts=createAsyncThunk(\r\n    'posts/getPosts',\r\n    async()=>{\r\n        //const response= await client.get('fakeApi/posts')        \r\n        try {\r\n            const response = await axios.get('https://jsonplaceholder.typicode.com/posts'); \r\n            console.log('url data: ',response.data)\r\n            return response.data;\r\n        } catch (err) {\r\n            // Handle Error Here\r\n            console.error(err);\r\n        }\r\n\r\n\r\n\r\n        // const response= await axios.get('https://www.vrt.be/vrtnws/nl/regio/_jcr_content/par/grid.app.json')\r\n        // console.log('url data: ',response.data)\r\n        // return response.data;\r\n\r\n    }\r\n);\r\n\r\n//posts object\r\n\r\n\r\nconst postsSlice = createSlice({\r\n    name:'posts',\r\n    initialState,\r\n    reducers:{\r\n\r\n        postAdded: {\r\n            reducer(state, action){\r\n            state.posts.push(action.payload)\r\n            },\r\n            prepare(title, content,userId){\r\n                return{\r\n                    payload:{\r\n                        id:nanoid(),\r\n                        title,\r\n                        content,\r\n                        date:new Date().toISOString(),\r\n                        user:userId\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        // postAdded(state, action){\r\n        //     // state:huidige state\r\n        //     state.push(action.payload)\r\n        // },\r\n\r\n        postUpdated(state, action){\r\n            // in action.payload.id, .title, .content\r\n            const {id, title, content}= action.payload\r\n            const existingPost = state.posts.find(post => post.id===id)\r\n\r\n            if(existingPost){\r\n                existingPost.title=title;\r\n                existingPost.content=content;\r\n            }\r\n\r\n        }\r\n    }\r\n})\r\n\r\nexport const {postAdded,postUpdated} = postsSlice.actions\r\nexport default postsSlice.reducer\r\n\r\nexport const selectAllPosts= state =>state.posts.posts\r\nexport const selectPostById = (state, postId) =>state.posts.posts.find(post => post.id === postId)\r\n"]},"metadata":{},"sourceType":"module"}