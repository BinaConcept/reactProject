{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createAsyncThunk, createSlice, nanoid } from \"@reduxjs/toolkit\";\nimport { useDispatch } from \"react-redux\";\nconst initialState = {\n  newsData: [// {id:'1', title:'Title1', content:'dit is wat tekst 1',date:'2016-01-04 10:34:23', user:'1'},\n    // {id:'2', title:'Title2', content:'dit is wat tekst 2',date:'2016-01-04 10:34:23',user:'2'}\n  ],\n  // newsData:[],\n  status: 'idle',\n  error: null\n}; //api geven\n\nexport const getNews = _s(createAsyncThunk('news/getNews', _s(async () => {\n  _s();\n\n  const dispath = useDispatch();\n\n  try {\n    const response = await fetch('https://www.vrt.be/vrtnws/nl/regio/_jcr_content/par/grid.app.json');\n    const data = await response.json();\n    console.log('url data: ', data);\n    dispath(postsSlicenewsAdded());\n    return data;\n  } catch (err) {\n    // Handle Error Here\n    console.error(err);\n  }\n}, \"QtPkhNWsepujoPwNLLhqBxhGDTw=\", false, function () {\n  return [useDispatch];\n})), \"QtPkhNWsepujoPwNLLhqBxhGDTw=\", false, function () {\n  return [useDispatch];\n}); //posts object\n\nconst postsSlice = createSlice({\n  name: 'news',\n  initialState,\n  reducers: {\n    newsAdded(state, action) {\n      console.log('newsAdded'); // in action.payload.id, .title, .content\n\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.news.find(post => post.id === id);\n\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    },\n\n    postAdded: {\n      reducer(state, action) {\n        state.newsData.push(action.payload);\n      },\n\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            date: new Date().toISOString(),\n            user: userId\n          }\n        };\n      }\n\n    },\n\n    // postAdded(state, action){\n    //     // state:huidige state\n    //     state.push(action.payload)\n    // },\n    postUpdated(state, action) {\n      // in action.payload.id, .title, .content\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.news.find(post => post.id === id);\n\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n\n  }\n});\nexport const {\n  postAdded,\n  postUpdated\n} = postsSlice.actions;\nexport default postsSlice.reducer;\nexport const selectAllNews = state => state.news.newsData;\nexport const selectPostById = (state, postId) => state.news.newsData.find(post => post.id === postId);","map":{"version":3,"sources":["D:/Thomas More/Bacholer/React/Projecten/project_2/src/features/postsSlice.js"],"names":["createAsyncThunk","createSlice","nanoid","useDispatch","initialState","newsData","status","error","getNews","dispath","response","fetch","data","json","console","log","postsSlicenewsAdded","err","postsSlice","name","reducers","newsAdded","state","action","id","title","content","payload","existingPost","news","find","post","postAdded","reducer","push","prepare","userId","date","Date","toISOString","user","postUpdated","actions","selectAllNews","selectPostById","postId"],"mappings":"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","sourcesContent":["import {createAsyncThunk, createSlice, nanoid} from \"@reduxjs/toolkit\"\r\nimport { useDispatch } from \"react-redux\";\r\n\r\n\r\nconst initialState = {\r\n  newsData:[\r\n    // {id:'1', title:'Title1', content:'dit is wat tekst 1',date:'2016-01-04 10:34:23', user:'1'},\r\n    // {id:'2', title:'Title2', content:'dit is wat tekst 2',date:'2016-01-04 10:34:23',user:'2'}\r\n    ],\r\n// newsData:[],\r\n    status:'idle',\r\n    error: null\r\n}\r\n\r\n//api geven\r\nexport const getNews=createAsyncThunk(\r\n    'news/getNews',\r\n    async()=>{   \r\n        const dispath =useDispatch(); \r\n        try {\r\n            const response =  await fetch('https://www.vrt.be/vrtnws/nl/regio/_jcr_content/par/grid.app.json'); \r\n            const data = await response.json();\r\n            console.log('url data: ',data)\r\n            dispath (postsSlicenewsAdded())\r\n            return data\r\n            \r\n           \r\n        } catch (err) {\r\n            // Handle Error Here\r\n            console.error(err);\r\n        }\r\n    }\r\n);\r\n\r\n//posts object\r\n\r\n\r\nconst postsSlice = createSlice({\r\n    name:'news',\r\n    initialState,\r\n    reducers:{\r\n\r\n        newsAdded(state, action){\r\n            console.log('newsAdded')\r\n            // in action.payload.id, .title, .content\r\n            const {id, title, content}= action.payload\r\n            const existingPost = state.news.find(post => post.id===id)\r\n\r\n            if(existingPost){\r\n                existingPost.title=title;\r\n                existingPost.content=content;\r\n            }\r\n\r\n        },\r\n\r\n        postAdded: {\r\n            reducer(state, action){\r\n            state.newsData.push(action.payload)\r\n            },\r\n            prepare(title, content,userId){\r\n                return{\r\n                    payload:{\r\n                        id:nanoid(),\r\n                        title,\r\n                        content,\r\n                        date:new Date().toISOString(),\r\n                        user:userId\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        // postAdded(state, action){\r\n        //     // state:huidige state\r\n        //     state.push(action.payload)\r\n        // },\r\n\r\n        postUpdated(state, action){\r\n            // in action.payload.id, .title, .content\r\n            const {id, title, content}= action.payload\r\n            const existingPost = state.news.find(post => post.id===id)\r\n\r\n            if(existingPost){\r\n                existingPost.title=title;\r\n                existingPost.content=content;\r\n            }\r\n\r\n        }\r\n    }\r\n})\r\n\r\nexport const {postAdded,postUpdated} = postsSlice.actions\r\nexport default postsSlice.reducer\r\n\r\nexport const selectAllNews= state =>state.news.newsData\r\nexport const selectPostById = (state, postId) =>state.news.newsData.find(post => post.id === postId)\r\n"]},"metadata":{},"sourceType":"module"}