{"ast":null,"code":"import { createSlice, nanoid } from \"@reduxjs/toolkit\";\nconst initialState = {\n  newsData: [],\n  status: 'idle',\n  error: null\n}; //api geven\n\nexport const getNews = () => async dispatch => {\n  try {\n    const res = await fetch(`https://www.vrt.be/vrtnws/nl/regio/_jcr_content/par/grid.app.json`);\n    const data = await res.json();\n    dispatch(allNewsItems(data));\n  } catch (err) {//   dispatch(getUserListFailure(err.message));\n  }\n};\nconst postsSlice = createSlice({\n  name: 'news',\n  initialState,\n  reducers: {\n    newsPost: {\n      reducer(state, action) {\n        console.log('before: ', state.newsData);\n        state.newsData = [...state.newsData, action.payload];\n        console.log('after: ', state.newsData); // state.newsData.push(action.payload)\n      },\n\n      prepare(picture, displayId, title, discription, subtitle, content) {\n        return {\n          payload: {\n            id: nanoid(),\n            picture,\n            content,\n            title,\n            discription,\n            subtitle,\n            date: new Date().toISOString(),\n            displayTag: displayId\n          }\n        };\n      }\n\n    },\n    postAdded: {\n      reducer(state, action) {\n        state.newsData.push(action.payload);\n      },\n\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            date: new Date().toISOString(),\n            user: userId\n          }\n        };\n      }\n\n    },\n\n    allNewsItems(state, action) {\n      // var ids = new Set(state.newsData.map(d => d.ID));\n      //  state.newsData =[...state.newsData,...action.payload.filter(d => !ids.has(d.ID))];\n      console(state.newsData);\n\n      if (state.newsData) {} else {\n        state.newsData = action.payload;\n      }\n\n      state.newsData = [...state.newsData];\n    },\n\n    postUpdated(state, action) {\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.news.find(post => post.id === id);\n\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n\n  }\n});\nexport const {\n  postAdded,\n  postUpdated,\n  allNewsItems,\n  newsPost\n} = postsSlice.actions;\nexport default postsSlice.reducer;\nconsole.log(state => state.news.newsData);\nexport const selectAllNews = state => state.news.newsData;\nexport const selectNewsById = (state, Id) => state.news.newsData.find(news => news.id === Id);","map":{"version":3,"sources":["D:/Thomas More/Bacholer/React/Projecten/project_2/src/features/postsSlice.js"],"names":["createSlice","nanoid","initialState","newsData","status","error","getNews","dispatch","res","fetch","data","json","allNewsItems","err","postsSlice","name","reducers","newsPost","reducer","state","action","console","log","payload","prepare","picture","displayId","title","discription","subtitle","content","id","date","Date","toISOString","displayTag","postAdded","push","userId","user","postUpdated","existingPost","news","find","post","actions","selectAllNews","selectNewsById","Id"],"mappings":"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","sourcesContent":["import { createSlice, nanoid} from \"@reduxjs/toolkit\"\r\n\r\n\r\nconst initialState = {\r\n\r\n newsData:[],\r\n    status:'idle',\r\n    error: null\r\n}\r\n\r\n//api geven\r\n\r\nexport const getNews = () => async dispatch => {\r\n    try {\r\n      const res = await fetch(`https://www.vrt.be/vrtnws/nl/regio/_jcr_content/par/grid.app.json`);\r\n      const data = await res.json();\r\n      dispatch(allNewsItems(data));\r\n    } catch (err) {\r\n    //   dispatch(getUserListFailure(err.message));\r\n    }\r\n  }\r\n\r\nconst postsSlice = createSlice({\r\n    name:'news',\r\n    initialState,\r\n    reducers:{\r\n\r\n\r\n        newsPost: {\r\n            reducer(state, action){\r\n                console.log('before: ',state.newsData)\r\n                state.newsData =[...state.newsData,action.payload]\r\n                console.log('after: ',state.newsData)\r\n            // state.newsData.push(action.payload)\r\n            },\r\n            prepare(picture, displayId, title,discription,subtitle,content){\r\n               \r\n                return{\r\n                    payload:{\r\n                        id:nanoid(),\r\n                        picture,\r\n                        content,\r\n                        title,\r\n                        discription,\r\n                        subtitle,\r\n                        date:new Date().toISOString(),\r\n                        displayTag:displayId\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        postAdded: {\r\n            reducer(state, action){\r\n            state.newsData.push(action.payload)\r\n            },\r\n            prepare(title, content,userId){\r\n                return{\r\n                    payload:{\r\n                        id:nanoid(),\r\n                        title,\r\n                        content,\r\n                        date:new Date().toISOString(),\r\n                        user:userId\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        \r\n        allNewsItems(state, action){\r\n           \r\n            // var ids = new Set(state.newsData.map(d => d.ID));\r\n            //  state.newsData =[...state.newsData,...action.payload.filter(d => !ids.has(d.ID))];\r\n                \r\n            \r\n               console(state.newsData)\r\n               if(state.newsData)\r\n               {\r\n\r\n               }\r\n               else\r\n               {\r\n                state.newsData =action.payload\r\n               }\r\n                state.newsData =[...state.newsData]\r\n             \r\n            \r\n        },\r\n\r\n        postUpdated(state, action){\r\n            const {id, title, content}= action.payload\r\n            const existingPost = state.news.find(post => post.id===id)\r\n\r\n            if(existingPost){\r\n                existingPost.title=title;\r\n                existingPost.content=content;\r\n            }\r\n\r\n        }\r\n    }\r\n})\r\n\r\nexport const {postAdded,postUpdated,allNewsItems,newsPost} = postsSlice.actions\r\nexport default postsSlice.reducer\r\n\r\nconsole.log(state =>state.news.newsData )\r\nexport const selectAllNews= state =>state.news.newsData \r\nexport const selectNewsById = (state, Id) =>state.news.newsData.find(news => news.id === Id)\r\n"]},"metadata":{},"sourceType":"module"}