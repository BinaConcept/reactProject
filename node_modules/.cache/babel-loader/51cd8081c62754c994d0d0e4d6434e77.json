{"ast":null,"code":"import { createSlice, nanoid } from \"@reduxjs/toolkit\";\nconst initialState = {\n  newsData: [],\n  status: 'idle',\n  error: null\n}; //api geven\n\nexport const getNews = () => async dispatch => {\n  try {\n    const res = await fetch(`https://www.vrt.be/vrtnws/nl/regio/_jcr_content/par/grid.app.json`);\n    const data = await res.json();\n    dispatch(allNewsItems(data));\n  } catch (err) {//   dispatch(getUserListFailure(err.message));\n  }\n};\nconst postsSlice = createSlice({\n  name: 'news',\n  initialState,\n  reducers: {\n    newsPost: {\n      reducer(state, action) {\n        state.newsData.push(action.payload);\n      },\n\n      prepare(imageUrls, display, title, discription, subtitle, content) {\n        console.log(imageUrls);\n        return {\n          payload: {\n            id: nanoid(),\n            imageUrls: '/assets/images/' + imageUrls.name,\n            content,\n            title,\n            discription,\n            subtitle,\n            articleDates: new Date().toISOString(),\n            displayTag: display\n          }\n        };\n      }\n\n    },\n\n    // postAdded: {\n    //     reducer(state, action){\n    //     state.newsData.push(action.payload)\n    //     },\n    //     prepare(title, content,userId){\n    //         return{\n    //             payload:{\n    //                 id:nanoid(),\n    //                 title,\n    //                 content,\n    //                 date:new Date().toISOString(),\n    //                 user:userId\n    //             }\n    //         }\n    //     }\n    // },\n    allNewsItems(state, action) {\n      var ids = new Set(state.newsData.map(d => d.ID));\n      state.newsData = [...state.newsData, ...action.payload.filter(d => !ids.has(d.ID))];\n    },\n\n    newsUpdated(state, action) {\n      const {\n        id,\n        imageUrls,\n        display,\n        title,\n        discription,\n        subtitle,\n        content\n      } = action.payload;\n      const existingPost = state.newsData.find(post => post.id === id);\n\n      if (existingPost) {\n        existingPost.imageUrls = imageUrls;\n        existingPost.displayTag = display;\n        existingPost.title = title;\n        existingPost.discription = discription;\n        existingPost.subtitle = subtitle;\n        existingPost.content = content;\n      }\n    }\n\n  }\n});\nexport const {\n  postAdded,\n  newsUpdated,\n  allNewsItems,\n  newsPost\n} = postsSlice.actions;\nexport default postsSlice.reducer;\nconsole.log(state => state.news.newsData);\nexport const selectAllNews = state => state.news.newsData;\nexport const selectNewsById = (state, Id) => state.news.newsData.find(news => news.id === Id);","map":{"version":3,"sources":["D:/Thomas More/Bacholer/React/Projecten/project_2/src/features/postsSlice.js"],"names":["createSlice","nanoid","initialState","newsData","status","error","getNews","dispatch","res","fetch","data","json","allNewsItems","err","postsSlice","name","reducers","newsPost","reducer","state","action","push","payload","prepare","imageUrls","display","title","discription","subtitle","content","console","log","id","articleDates","Date","toISOString","displayTag","ids","Set","map","d","ID","filter","has","newsUpdated","existingPost","find","post","postAdded","actions","news","selectAllNews","selectNewsById","Id"],"mappings":"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","sourcesContent":["import { createSlice, nanoid} from \"@reduxjs/toolkit\"\r\n\r\n\r\nconst initialState = {\r\n\r\n newsData:[],\r\n    status:'idle',\r\n    error: null\r\n}\r\n\r\n//api geven\r\n\r\nexport const getNews = () => async dispatch => {\r\n    try {\r\n      const res = await fetch(`https://www.vrt.be/vrtnws/nl/regio/_jcr_content/par/grid.app.json`);\r\n      const data = await res.json();\r\n      dispatch(allNewsItems(data));\r\n    } catch (err) {\r\n    //   dispatch(getUserListFailure(err.message));\r\n    }\r\n  }\r\n\r\nconst postsSlice = createSlice({\r\n    name:'news',\r\n    initialState,\r\n    reducers:{\r\n\r\n\r\n        newsPost: {\r\n            reducer(state, action){\r\n            state.newsData.push(action.payload)\r\n            },\r\n            prepare(imageUrls, display, title,discription,subtitle,content){\r\n               console.log(imageUrls)\r\n                return{\r\n                    payload:{\r\n                        id:nanoid(),\r\n                        imageUrls:'/assets/images/'+imageUrls.name,\r\n                        content,\r\n                        title,\r\n                        discription,\r\n                        subtitle,\r\n                        articleDates:new Date().toISOString(),\r\n                        displayTag:display\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        // postAdded: {\r\n        //     reducer(state, action){\r\n        //     state.newsData.push(action.payload)\r\n        //     },\r\n        //     prepare(title, content,userId){\r\n        //         return{\r\n        //             payload:{\r\n        //                 id:nanoid(),\r\n        //                 title,\r\n        //                 content,\r\n        //                 date:new Date().toISOString(),\r\n        //                 user:userId\r\n        //             }\r\n        //         }\r\n        //     }\r\n        // },\r\n        \r\n        allNewsItems(state, action){\r\n            var ids = new Set(state.newsData.map(d => d.ID));\r\n             state.newsData =[...state.newsData,...action.payload.filter(d => !ids.has(d.ID))];\r\n        },\r\n\r\n        newsUpdated(state, action){\r\n            const {id, imageUrls, display, title, discription, subtitle, content}= action.payload\r\n            const existingPost = state.newsData.find(post => post.id===id)\r\n\r\n            if(existingPost){\r\n                existingPost.imageUrls=imageUrls;\r\n                existingPost.displayTag=display;\r\n                existingPost.title=title;\r\n                existingPost.discription=discription;\r\n                existingPost.subtitle=subtitle;\r\n                existingPost.content=content;\r\n            }\r\n\r\n        }\r\n    }\r\n})\r\n\r\nexport const {postAdded,newsUpdated,allNewsItems,newsPost} = postsSlice.actions\r\nexport default postsSlice.reducer\r\n\r\nconsole.log(state =>state.news.newsData )\r\nexport const selectAllNews= state =>state.news.newsData \r\nexport const selectNewsById = (state, Id) =>state.news.newsData.find(news => news.id === Id)\r\n"]},"metadata":{},"sourceType":"module"}