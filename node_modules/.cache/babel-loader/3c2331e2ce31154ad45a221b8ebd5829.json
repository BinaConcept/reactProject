{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createAsyncThunk, createSlice, nanoid } from \"@reduxjs/toolkit\";\nimport { useEffect } from \"react\";\nconst initialState = {\n  newsData: [// {id:'1', title:'Title1', content:'dit is wat tekst 1',date:'2016-01-04 10:34:23', user:'1'},\n    // {id:'2', title:'Title2', content:'dit is wat tekst 2',date:'2016-01-04 10:34:23',user:'2'}\n  ],\n  // newsData:[],\n  status: 'idle',\n  error: null\n}; //api geven\n\nexport const getNews = _s(createAsyncThunk('news/getNews', _s(async () => {\n  _s();\n\n  try {\n    const [id, setTitle] = useState('');\n    const [patch, setContent] = useState('');\n    const [title, setUserId] = useState('');\n    const response = await fetch('https://www.vrt.be/vrtnws/nl/regio/_jcr_content/par/grid.app.json');\n    const data = await response.json();\n    console.log('url data: ', data);\n    postAdded(title, content, userId);\n    return data;\n  } catch (err) {\n    // Handle Error Here\n    console.error(err);\n  }\n}, \"nHN+5QIchPhUq/MJmES5DqAsLeA=\")), \"nHN+5QIchPhUq/MJmES5DqAsLeA=\"); //posts object\n\nconst postsSlice = createSlice({\n  name: 'news',\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer(state, action) {\n        state.newsData.push(action.payload);\n      },\n\n      // prepare(title, content,userId){\n      //     return{\n      //         payload:{\n      //             id:nanoid(),\n      //             title,\n      //             content,\n      //             date:new Date().toISOString(),\n      //             user:userId\n      //         }\n      //     }\n      // }\n      prepare(id, patch, title, description, imageUrls, tags, articleDates, liveBlogItems, isVideo, isLive, displayTag, expertDicription, video) {\n        return {\n          payload: {\n            id,\n            patch,\n            title\n          }\n        };\n      }\n\n    },\n\n    // postAdded(state, action){\n    //     // state:huidige state\n    //     state.push(action.payload)\n    // },\n    postUpdated(state, action) {\n      // in action.payload.id, .title, .content\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.news.find(post => post.id === id);\n\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n\n  }\n});\nexport const {\n  postAdded,\n  postUpdated\n} = postsSlice.actions;\nexport default postsSlice.reducer;\nexport const selectAllNews = state => state.news.newsData;\nexport const selectPostById = (state, postId) => state.news.newsData.find(post => post.id === postId);","map":{"version":3,"sources":["D:/Thomas More/Bacholer/React/Projecten/project_2/src/features/postsSlice.js"],"names":["createAsyncThunk","createSlice","nanoid","useEffect","initialState","newsData","status","error","getNews","id","setTitle","useState","patch","setContent","title","setUserId","response","fetch","data","json","console","log","postAdded","content","userId","err","postsSlice","name","reducers","reducer","state","action","push","payload","prepare","description","imageUrls","tags","articleDates","liveBlogItems","isVideo","isLive","displayTag","expertDicription","video","postUpdated","existingPost","news","find","post","actions","selectAllNews","selectPostById","postId"],"mappings":"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","sourcesContent":["import {createAsyncThunk, createSlice, nanoid} from \"@reduxjs/toolkit\"\r\n\r\nimport {useEffect} from \"react\";\r\n\r\n\r\nconst initialState = {\r\n  newsData:[\r\n    // {id:'1', title:'Title1', content:'dit is wat tekst 1',date:'2016-01-04 10:34:23', user:'1'},\r\n    // {id:'2', title:'Title2', content:'dit is wat tekst 2',date:'2016-01-04 10:34:23',user:'2'}\r\n    ],\r\n// newsData:[],\r\n    status:'idle',\r\n    error: null\r\n}\r\n\r\n//api geven\r\nexport const getNews=createAsyncThunk(\r\n    'news/getNews',\r\n    async()=>{      \r\n        try {\r\n            const [id, setTitle] = useState('')\r\n            const [patch, setContent] = useState('')\r\n            const [title, setUserId] = useState('')\r\n          \r\n            const response =  await fetch('https://www.vrt.be/vrtnws/nl/regio/_jcr_content/par/grid.app.json'); \r\n            const data = await response.json();\r\n            console.log('url data: ',data)\r\n            postAdded(title, content, userId)\r\n\r\n            return data\r\n            \r\n           \r\n        } catch (err) {\r\n            // Handle Error Here\r\n            console.error(err);\r\n        }\r\n    }\r\n);\r\n\r\n\r\n//posts object\r\n\r\n\r\nconst postsSlice = createSlice({\r\n    name:'news',\r\n    initialState,\r\n    reducers:{\r\n\r\n        postAdded: {\r\n            reducer(state, action){\r\n            state.newsData.push(action.payload)\r\n            },\r\n            // prepare(title, content,userId){\r\n            //     return{\r\n            //         payload:{\r\n            //             id:nanoid(),\r\n            //             title,\r\n            //             content,\r\n            //             date:new Date().toISOString(),\r\n            //             user:userId\r\n            //         }\r\n            //     }\r\n            // }\r\n            prepare(id, patch,title,description,imageUrls,tags,articleDates,liveBlogItems,isVideo,isLive,displayTag,expertDicription,video){\r\n                    return{\r\n                        payload:{\r\n\r\n                            id,\r\n                            patch,\r\n                            title,\r\n\r\n                           \r\n                        }\r\n                    }\r\n                }\r\n        },\r\n\r\n        // postAdded(state, action){\r\n        //     // state:huidige state\r\n        //     state.push(action.payload)\r\n        // },\r\n\r\n        postUpdated(state, action){\r\n            // in action.payload.id, .title, .content\r\n            const {id, title, content}= action.payload\r\n            const existingPost = state.news.find(post => post.id===id)\r\n\r\n            if(existingPost){\r\n                existingPost.title=title;\r\n                existingPost.content=content;\r\n            }\r\n\r\n        }\r\n    }\r\n})\r\n\r\nexport const {postAdded,postUpdated} = postsSlice.actions\r\nexport default postsSlice.reducer\r\n\r\nexport const selectAllNews= state =>state.news.newsData\r\nexport const selectPostById = (state, postId) =>state.news.newsData.find(post => post.id === postId)\r\n"]},"metadata":{},"sourceType":"module"}