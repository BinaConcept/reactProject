{"ast":null,"code":"import { createAsyncThunk, createSlice, nanoid } from \"@reduxjs/toolkit\";\nimport { useState } from 'react';\nconst initialState = {\n  newsData: [// {id:'1', title:'Title1', content:'dit is wat tekst 1',date:'2016-01-04 10:34:23', user:'1'},\n    // {id:'2', title:'Title2', content:'dit is wat tekst 2',date:'2016-01-04 10:34:23',user:'2'}\n  ],\n  // newsData:[],\n  status: 'idle',\n  error: null\n};\nconst [title, setTitle] = useState('');\nconst [content, setContent] = useState('');\nconst [userId, setUserId] = useState('');\nconst dispath = useDispatch(); //api geven\n\nexport const getNews = createAsyncThunk('news/getNews', async () => {\n  try {\n    const response = await fetch('https://www.vrt.be/vrtnws/nl/regio/_jcr_content/par/grid.app.json');\n    const data = await response.json();\n    initialState.newsData.push(data[0]);\n    console.log('url data: ', data, initialState.newsData);\n    dispath(postAdded(title, content, userId));\n    return data;\n  } catch (err) {\n    // Handle Error Here\n    console.error(err);\n  }\n}); //posts object\n\nconst postsSlice = createSlice({\n  name: 'news',\n  initialState,\n  reducers: {\n    dataAdded: {\n      reducer(state, action) {\n        state.newsData = [...state.newsData, action.payload];\n      }\n\n    },\n\n    // postAdded: {\n    //     reducer(state, action){\n    //     state.newsData.push(action.payload)\n    //     },\n    //     prepare(title, content,userId){\n    //         return{\n    //             payload:{\n    //                 id:nanoid(),\n    //                 title,\n    //                 content,\n    //                 date:new Date().toISOString(),\n    //                 user:userId\n    //             }\n    //         }\n    //     }\n    // },\n    // postAdded(state, action){\n    //     // state:huidige state\n    //     state.push(action.payload)\n    // },\n    postUpdated(state, action) {\n      // in action.payload.id, .title, .content\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.news.find(post => post.id === id);\n\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n\n  }\n});\nexport const {\n  postAdded,\n  postUpdated\n} = postsSlice.actions;\nexport default postsSlice.reducer;\nexport const selectAllNews = state => state.news.newsData;\nexport const selectPostById = (state, postId) => state.news.newsData.find(post => post.id === postId);","map":{"version":3,"sources":["D:/Thomas More/Bacholer/React/Projecten/project_2/src/features/postsSlice.js"],"names":["createAsyncThunk","createSlice","nanoid","useState","initialState","newsData","status","error","title","setTitle","content","setContent","userId","setUserId","dispath","useDispatch","getNews","response","fetch","data","json","push","console","log","postAdded","err","postsSlice","name","reducers","dataAdded","reducer","state","action","payload","postUpdated","id","existingPost","news","find","post","actions","selectAllNews","selectPostById","postId"],"mappings":"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","sourcesContent":["import {createAsyncThunk, createSlice, nanoid} from \"@reduxjs/toolkit\"\r\nimport { useState } from 'react'\r\n\r\nconst initialState = {\r\n  newsData:[\r\n    // {id:'1', title:'Title1', content:'dit is wat tekst 1',date:'2016-01-04 10:34:23', user:'1'},\r\n    // {id:'2', title:'Title2', content:'dit is wat tekst 2',date:'2016-01-04 10:34:23',user:'2'}\r\n    ],\r\n// newsData:[],\r\n    status:'idle',\r\n    error: null\r\n}\r\n\r\nconst [title, setTitle] = useState('')\r\n  const [content, setContent] = useState('')\r\n  const [userId, setUserId] = useState('')\r\n\r\n\r\n  const dispath = useDispatch();\r\n\r\n//api geven\r\nexport const getNews=createAsyncThunk(\r\n    'news/getNews',\r\n    async()=>{      \r\n        try {\r\n            const response =  await fetch('https://www.vrt.be/vrtnws/nl/regio/_jcr_content/par/grid.app.json'); \r\n            const data = await response.json();\r\n            initialState.newsData.push(data[0])\r\n            console.log('url data: ',data,initialState.newsData)\r\n            dispath(postAdded(title, content, userId))\r\n            return data\r\n            \r\n           \r\n        } catch (err) {\r\n            // Handle Error Here\r\n            console.error(err);\r\n        }\r\n    }\r\n);\r\n\r\n//posts object\r\n\r\n\r\nconst postsSlice = createSlice({\r\n    name:'news',\r\n    initialState,\r\n    reducers:{\r\n\r\n        dataAdded: {\r\n            reducer(state, action){\r\n            state.newsData = [...state.newsData, action.payload]\r\n            }\r\n        },\r\n\r\n        // postAdded: {\r\n        //     reducer(state, action){\r\n        //     state.newsData.push(action.payload)\r\n        //     },\r\n        //     prepare(title, content,userId){\r\n        //         return{\r\n        //             payload:{\r\n        //                 id:nanoid(),\r\n        //                 title,\r\n        //                 content,\r\n        //                 date:new Date().toISOString(),\r\n        //                 user:userId\r\n        //             }\r\n        //         }\r\n        //     }\r\n        // },\r\n\r\n\r\n        // postAdded(state, action){\r\n        //     // state:huidige state\r\n        //     state.push(action.payload)\r\n        // },\r\n\r\n        postUpdated(state, action){\r\n            // in action.payload.id, .title, .content\r\n            const {id, title, content}= action.payload\r\n            const existingPost = state.news.find(post => post.id===id)\r\n\r\n            if(existingPost){\r\n                existingPost.title=title;\r\n                existingPost.content=content;\r\n            }\r\n\r\n        }\r\n    }\r\n})\r\n\r\nexport const {postAdded,postUpdated} = postsSlice.actions\r\nexport default postsSlice.reducer\r\n\r\nexport const selectAllNews= state =>state.news.newsData\r\nexport const selectPostById = (state, postId) =>state.news.newsData.find(post => post.id === postId)\r\n"]},"metadata":{},"sourceType":"module"}