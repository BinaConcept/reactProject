{"ast":null,"code":"import { createAsyncThunk, createSlice, nanoid } from \"@reduxjs/toolkit\";\nimport { useDispatch } from \"react-redux\";\nconst initialState = {\n  newsData: [// {id:'1', title:'Title1', content:'dit is wat tekst 1',date:'2016-01-04 10:34:23', user:'1'},\n    // {id:'2', title:'Title2', content:'dit is wat tekst 2',date:'2016-01-04 10:34:23',user:'2'}\n  ],\n  // newsData:[],\n  status: 'idle',\n  error: null\n}; //api geven\n\nexport const getNews = () => {\n  return dispatch => {\n    return;\n  };\n}; // export const getNews=createAsyncThunk(\n//     'news/getNews',\n//     async()=>{   \n//         try { \n//             const response =  await fetch('https://www.vrt.be/vrtnws/nl/regio/_jcr_content/par/grid.app.json'); \n//             const data = await response.json();\n//             console.log('url data: ',data);\n//             return data\n//         } catch (err) {\n//             // Handle Error Here\n//             console.error(err);\n//         }\n//     }\n// );\n//posts object\n\nconst postsSlice = createSlice({\n  name: 'news',\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer(state, action) {\n        state.newsData.push(action.payload);\n      },\n\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            date: new Date().toISOString(),\n            user: userId\n          }\n        };\n      }\n\n    },\n\n    // postAdded(state, action){\n    //     // state:huidige state\n    //     state.push(action.payload)\n    // },\n    postUpdated(state, action) {\n      // in action.payload.id, .title, .content\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.news.find(post => post.id === id);\n\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n\n  }\n});\nexport const {\n  postAdded,\n  postUpdated\n} = postsSlice.actions;\nexport default postsSlice.reducer;\nexport const selectAllNews = state => state.news.newsData;\nexport const selectPostById = (state, postId) => state.news.newsData.find(post => post.id === postId);","map":{"version":3,"sources":["D:/Thomas More/Bacholer/React/Projecten/project_2/src/features/postsSlice.js"],"names":["createAsyncThunk","createSlice","nanoid","useDispatch","initialState","newsData","status","error","getNews","dispatch","postsSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","title","content","userId","id","date","Date","toISOString","user","postUpdated","existingPost","news","find","post","actions","selectAllNews","selectPostById","postId"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,EAAuCC,MAAvC,QAAoD,kBAApD;AACA,SAASC,WAAT,QAA4B,aAA5B;AAGA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAC,CACP;AACA;AAFO,GADU;AAKrB;AACIC,EAAAA,MAAM,EAAC,MANU;AAOjBC,EAAAA,KAAK,EAAE;AAPU,CAArB,C,CAUA;;AACA,OAAO,MAAMC,OAAO,GAAC,MAAI;AACrB,SAAOC,QAAD,IAAY;AACd;AACH,GAFD;AAGH,CAJM,C,CAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAGA,MAAMC,UAAU,GAAGT,WAAW,CAAC;AAC3BU,EAAAA,IAAI,EAAC,MADsB;AAE3BP,EAAAA,YAF2B;AAG3BQ,EAAAA,QAAQ,EAAC;AACLC,IAAAA,SAAS,EAAE;AACPC,MAAAA,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAe;AACtBD,QAAAA,KAAK,CAACV,QAAN,CAAeY,IAAf,CAAoBD,MAAM,CAACE,OAA3B;AACC,OAHM;;AAIPC,MAAAA,OAAO,CAACC,KAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuB;AAC1B,eAAM;AACFJ,UAAAA,OAAO,EAAC;AACJK,YAAAA,EAAE,EAACrB,MAAM,EADL;AAEJkB,YAAAA,KAFI;AAGJC,YAAAA,OAHI;AAIJG,YAAAA,IAAI,EAAC,IAAIC,IAAJ,GAAWC,WAAX,EAJD;AAKJC,YAAAA,IAAI,EAACL;AALD;AADN,SAAN;AASH;;AAdM,KADN;;AAkBL;AACA;AACA;AACA;AAEAM,IAAAA,WAAW,CAACb,KAAD,EAAQC,MAAR,EAAe;AACtB;AACA,YAAM;AAACO,QAAAA,EAAD;AAAKH,QAAAA,KAAL;AAAYC,QAAAA;AAAZ,UAAsBL,MAAM,CAACE,OAAnC;AACA,YAAMW,YAAY,GAAGd,KAAK,CAACe,IAAN,CAAWC,IAAX,CAAgBC,IAAI,IAAIA,IAAI,CAACT,EAAL,KAAUA,EAAlC,CAArB;;AAEA,UAAGM,YAAH,EAAgB;AACZA,QAAAA,YAAY,CAACT,KAAb,GAAmBA,KAAnB;AACAS,QAAAA,YAAY,CAACR,OAAb,GAAqBA,OAArB;AACH;AAEJ;;AAjCI;AAHkB,CAAD,CAA9B;AAwCA,OAAO,MAAM;AAACR,EAAAA,SAAD;AAAWe,EAAAA;AAAX,IAA0BlB,UAAU,CAACuB,OAA3C;AACP,eAAevB,UAAU,CAACI,OAA1B;AAEA,OAAO,MAAMoB,aAAa,GAAEnB,KAAK,IAAGA,KAAK,CAACe,IAAN,CAAWzB,QAAxC;AACP,OAAO,MAAM8B,cAAc,GAAG,CAACpB,KAAD,EAAQqB,MAAR,KAAkBrB,KAAK,CAACe,IAAN,CAAWzB,QAAX,CAAoB0B,IAApB,CAAyBC,IAAI,IAAIA,IAAI,CAACT,EAAL,KAAYa,MAA7C,CAAzC","sourcesContent":["import {createAsyncThunk, createSlice, nanoid} from \"@reduxjs/toolkit\"\r\nimport { useDispatch } from \"react-redux\";\r\n\r\n\r\nconst initialState = {\r\n  newsData:[\r\n    // {id:'1', title:'Title1', content:'dit is wat tekst 1',date:'2016-01-04 10:34:23', user:'1'},\r\n    // {id:'2', title:'Title2', content:'dit is wat tekst 2',date:'2016-01-04 10:34:23',user:'2'}\r\n    ],\r\n// newsData:[],\r\n    status:'idle',\r\n    error: null\r\n}\r\n\r\n//api geven\r\nexport const getNews=()=>{\r\n    return(dispatch)=>{\r\n        return\r\n    }\r\n}\r\n    \r\n\r\n// export const getNews=createAsyncThunk(\r\n//     'news/getNews',\r\n//     async()=>{   \r\n//         try { \r\n//             const response =  await fetch('https://www.vrt.be/vrtnws/nl/regio/_jcr_content/par/grid.app.json'); \r\n//             const data = await response.json();\r\n//             console.log('url data: ',data);\r\n//             return data\r\n            \r\n           \r\n//         } catch (err) {\r\n//             // Handle Error Here\r\n//             console.error(err);\r\n//         }\r\n//     }\r\n// );\r\n\r\n//posts object\r\n\r\n\r\nconst postsSlice = createSlice({\r\n    name:'news',\r\n    initialState,\r\n    reducers:{\r\n        postAdded: {\r\n            reducer(state, action){\r\n            state.newsData.push(action.payload)\r\n            },\r\n            prepare(title, content,userId){\r\n                return{\r\n                    payload:{\r\n                        id:nanoid(),\r\n                        title,\r\n                        content,\r\n                        date:new Date().toISOString(),\r\n                        user:userId\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        // postAdded(state, action){\r\n        //     // state:huidige state\r\n        //     state.push(action.payload)\r\n        // },\r\n\r\n        postUpdated(state, action){\r\n            // in action.payload.id, .title, .content\r\n            const {id, title, content}= action.payload\r\n            const existingPost = state.news.find(post => post.id===id)\r\n\r\n            if(existingPost){\r\n                existingPost.title=title;\r\n                existingPost.content=content;\r\n            }\r\n\r\n        }\r\n    }\r\n})\r\n\r\nexport const {postAdded,postUpdated} = postsSlice.actions\r\nexport default postsSlice.reducer\r\n\r\nexport const selectAllNews= state =>state.news.newsData\r\nexport const selectPostById = (state, postId) =>state.news.newsData.find(post => post.id === postId)\r\n"]},"metadata":{},"sourceType":"module"}