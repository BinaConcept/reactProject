{"ast":null,"code":"import { createAsyncThunk, createSlice, nanoid } from \"@reduxjs/toolkit\";\nconst initialState = {\n  data: [{\n    id: '1',\n    title: 'Title1',\n    content: 'dit is wat tekst 1',\n    date: '2016-01-04 10:34:23',\n    user: '1'\n  }, {\n    id: '2',\n    title: 'Title2',\n    content: 'dit is wat tekst 2',\n    date: '2016-01-04 10:34:23',\n    user: '2'\n  }],\n  status: 'idle',\n  error: null\n}; //api geven\n\nexport const getNews = createAsyncThunk('posts/getNews', async () => {\n  //const response= await client.get('fakeApi/posts')        \n  try {\n    const response = await fetch('https://www.vrt.be/vrtnws/nl/regio/_jcr_content/par/grid.app.json');\n    const x = await response.json();\n    console.log('url data: ', x);\n  } catch (err) {\n    // Handle Error Here\n    console.error(err);\n  }\n});\nconst postsSlice = createSlice({\n  name: 'news',\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer(state, action) {\n        state.posts.push(action.payload);\n      },\n\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            date: new Date().toISOString(),\n            user: userId\n          }\n        };\n      }\n\n    },\n\n    postUpdated(state, action) {\n      // in action.payload.id, .title, .content\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.posts.find(post => post.id === id);\n\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n\n  }\n});\nexport const {\n  postAdded,\n  postUpdated\n} = postsSlice.actions;\nexport default postsSlice.reducer;\nexport const selectAllPosts = state => state.news.data;\nexport const selectPostById = (state, postId) => state.news.data.find(post => post.id === postId); // export const {postAdded,postUpdated} = postsSlice.actions\n// export default postsSlice.reducer\n// export const selectAllPosts= state =>state.posts.posts\n// export const selectPostById = (state, postId) =>state.posts.posts.find(post => post.id === postId)","map":{"version":3,"sources":["D:/Thomas More/Bacholer/React/Projecten/project_2/src/features/postsSlice.js"],"names":["createAsyncThunk","createSlice","nanoid","initialState","data","id","title","content","date","user","status","error","getNews","response","fetch","x","json","console","log","err","postsSlice","name","reducers","postAdded","reducer","state","action","posts","push","payload","prepare","userId","Date","toISOString","postUpdated","existingPost","find","post","actions","selectAllPosts","news","selectPostById","postId"],"mappings":"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","sourcesContent":["import {createAsyncThunk, createSlice, nanoid} from \"@reduxjs/toolkit\"\r\n\r\n\r\nconst initialState = {\r\n  data:[\r\n    {id:'1', title:'Title1', content:'dit is wat tekst 1',date:'2016-01-04 10:34:23', user:'1'},\r\n    {id:'2', title:'Title2', content:'dit is wat tekst 2',date:'2016-01-04 10:34:23',user:'2'}\r\n    ],\r\n    status:'idle',\r\n    error: null\r\n}\r\n\r\n//api geven\r\nexport const getNews=createAsyncThunk(\r\n    'posts/getNews',\r\n    async()=>{\r\n        //const response= await client.get('fakeApi/posts')        \r\n        try {\r\n            const response =  await fetch('https://www.vrt.be/vrtnws/nl/regio/_jcr_content/par/grid.app.json'); \r\n            const x = await response.json();\r\n            console.log('url data: ',x)\r\n           \r\n        } catch (err) {\r\n            // Handle Error Here\r\n            console.error(err);\r\n        }\r\n    }\r\n);\r\n\r\nconst postsSlice = createSlice({\r\n    name:'news',\r\n    initialState,\r\n    reducers:{\r\n\r\n        postAdded: {\r\n            reducer(state, action){\r\n            state.posts.push(action.payload)\r\n            },\r\n            prepare(title, content,userId){\r\n                return{\r\n                    payload:{\r\n                        id:nanoid(),\r\n                        title,\r\n                        content,\r\n                        date:new Date().toISOString(),\r\n                        user:userId\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n\r\n\r\n        postUpdated(state, action){\r\n            // in action.payload.id, .title, .content\r\n            const {id, title, content}= action.payload\r\n            const existingPost = state.posts.find(post => post.id===id)\r\n\r\n            if(existingPost){\r\n                existingPost.title=title;\r\n                existingPost.content=content;\r\n            }\r\n\r\n        }\r\n    }\r\n})\r\n\r\nexport const {postAdded,postUpdated} = postsSlice.actions\r\nexport default postsSlice.reducer\r\n\r\nexport const selectAllPosts= state =>state.news.data\r\nexport const selectPostById = (state, postId) =>state.news.data.find(post => post.id === postId)\r\n\r\n\r\n\r\n// export const {postAdded,postUpdated} = postsSlice.actions\r\n// export default postsSlice.reducer\r\n\r\n// export const selectAllPosts= state =>state.posts.posts\r\n// export const selectPostById = (state, postId) =>state.posts.posts.find(post => post.id === postId)\r\n"]},"metadata":{},"sourceType":"module"}