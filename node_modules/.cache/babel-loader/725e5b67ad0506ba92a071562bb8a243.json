{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { useDispatch } from 'react-redux';\nconst initialState = {\n  newsData: [// {id:'1', title:'Title1', content:'dit is wat tekst 1',date:'2016-01-04 10:34:23', user:'1'},\n    // {id:'2', title:'Title2', content:'dit is wat tekst 2',date:'2016-01-04 10:34:23',user:'2'}\n  ],\n  // newsData:[],\n  status: 'idle',\n  error: null\n}; //api geven\n\nexport const getNews = _s(createAsyncThunk('news/getNews', _s(async () => {\n  _s();\n\n  const dispath = useDispatch();\n\n  try {\n    const response = await fetch('https://www.vrt.be/vrtnws/nl/regio/_jcr_content/par/grid.app.json');\n    const data = await response.json();\n    initialState.newsData.push(data[0]);\n    console.log('url data: ', data, initialState.newsData);\n    dispath(dataAdded(data));\n    return data;\n  } catch (err) {\n    // Handle Error Here\n    console.error(err);\n  }\n}, \"QtPkhNWsepujoPwNLLhqBxhGDTw=\", false, function () {\n  return [useDispatch];\n})), \"QtPkhNWsepujoPwNLLhqBxhGDTw=\", false, function () {\n  return [useDispatch];\n}); //posts object\n\nconst postsSlice = createSlice({\n  name: 'news',\n  initialState,\n  reducers: {\n    dataAdded: {\n      reducer(state, action) {\n        console.log('action.payload', action.payload);\n        state.newsData = [...state.newsData, action.payload];\n      }\n\n    },\n\n    // postAdded: {\n    //     reducer(state, action){\n    //     state.newsData.push(action.payload)\n    //     },\n    //     prepare(title, content,userId){\n    //         return{\n    //             payload:{\n    //                 id:nanoid(),\n    //                 title,\n    //                 content,\n    //                 date:new Date().toISOString(),\n    //                 user:userId\n    //             }\n    //         }\n    //     }\n    // },\n    // postAdded(state, action){\n    //     // state:huidige state\n    //     state.push(action.payload)\n    // },\n    postUpdated(state, action) {\n      // in action.payload.id, .title, .content\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.news.find(post => post.id === id);\n\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n\n  }\n});\nexport const {\n  postAdded,\n  postUpdated,\n  dataAdded\n} = postsSlice.actions;\nexport default postsSlice.reducer;\nexport const selectAllNews = state => state.news.newsData;\nexport const selectPostById = (state, postId) => state.news.newsData.find(post => post.id === postId);","map":{"version":3,"sources":["D:/Thomas More/Bacholer/React/Projecten/project_2/src/features/postsSlice.js"],"names":["createAsyncThunk","createSlice","useDispatch","initialState","newsData","status","error","getNews","dispath","response","fetch","data","json","push","console","log","dataAdded","err","postsSlice","name","reducers","reducer","state","action","payload","postUpdated","id","title","content","existingPost","news","find","post","postAdded","actions","selectAllNews","selectPostById","postId"],"mappings":";;AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,QAA4C,kBAA5C;AACA,SAASC,WAAT,QAA2B,aAA3B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAC,CACP;AACA;AAFO,GADU;AAKrB;AACIC,EAAAA,MAAM,EAAC,MANU;AAOjBC,EAAAA,KAAK,EAAE;AAPU,CAArB,C,CAcA;;AACA,OAAO,MAAMC,OAAO,MAACP,gBAAgB,CAEjC,cAFiC,KAGjC,YAAS;AAAA;;AACX,QAAMQ,OAAO,GAAGN,WAAW,EAA3B;;AAEM,MAAI;AACA,UAAMO,QAAQ,GAAI,MAAMC,KAAK,CAAC,mEAAD,CAA7B;AACA,UAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACAT,IAAAA,YAAY,CAACC,QAAb,CAAsBS,IAAtB,CAA2BF,IAAI,CAAC,CAAD,CAA/B;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyBJ,IAAzB,EAA8BR,YAAY,CAACC,QAA3C;AACAI,IAAAA,OAAO,CAACQ,SAAS,CAACL,IAAD,CAAV,CAAP;AACA,WAAOA,IAAP;AAGH,GATD,CASE,OAAOM,GAAP,EAAY;AACV;AACAH,IAAAA,OAAO,CAACR,KAAR,CAAcW,GAAd;AACH;AACJ,CAnBgC;AAAA,UAInBf,WAJmB;AAAA,GAAjB;AAAA,UAIFA,WAJE;AAAA,EAAb,C,CAsBP;;AAGA,MAAMgB,UAAU,GAAGjB,WAAW,CAAC;AAC3BkB,EAAAA,IAAI,EAAC,MADsB;AAE3BhB,EAAAA,YAF2B;AAG3BiB,EAAAA,QAAQ,EAAC;AAELJ,IAAAA,SAAS,EAAE;AACPK,MAAAA,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAe;AAClBT,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA6BQ,MAAM,CAACC,OAApC;AACJF,QAAAA,KAAK,CAAClB,QAAN,GAAiB,CAAC,GAAGkB,KAAK,CAAClB,QAAV,EAAoBmB,MAAM,CAACC,OAA3B,CAAjB;AACC;;AAJM,KAFN;;AASL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEAC,IAAAA,WAAW,CAACH,KAAD,EAAQC,MAAR,EAAe;AACtB;AACA,YAAM;AAACG,QAAAA,EAAD;AAAKC,QAAAA,KAAL;AAAYC,QAAAA;AAAZ,UAAsBL,MAAM,CAACC,OAAnC;AACA,YAAMK,YAAY,GAAGP,KAAK,CAACQ,IAAN,CAAWC,IAAX,CAAgBC,IAAI,IAAIA,IAAI,CAACN,EAAL,KAAUA,EAAlC,CAArB;;AAEA,UAAGG,YAAH,EAAgB;AACZA,QAAAA,YAAY,CAACF,KAAb,GAAmBA,KAAnB;AACAE,QAAAA,YAAY,CAACD,OAAb,GAAqBA,OAArB;AACH;AAEJ;;AA1CI;AAHkB,CAAD,CAA9B;AAiDA,OAAO,MAAM;AAACK,EAAAA,SAAD;AAAWR,EAAAA,WAAX;AAAwBT,EAAAA;AAAxB,IAAqCE,UAAU,CAACgB,OAAtD;AACP,eAAehB,UAAU,CAACG,OAA1B;AAEA,OAAO,MAAMc,aAAa,GAAEb,KAAK,IAAGA,KAAK,CAACQ,IAAN,CAAW1B,QAAxC;AACP,OAAO,MAAMgC,cAAc,GAAG,CAACd,KAAD,EAAQe,MAAR,KAAkBf,KAAK,CAACQ,IAAN,CAAW1B,QAAX,CAAoB2B,IAApB,CAAyBC,IAAI,IAAIA,IAAI,CAACN,EAAL,KAAYW,MAA7C,CAAzC","sourcesContent":["import {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\"\r\nimport { useDispatch} from 'react-redux'\r\n\r\nconst initialState = {\r\n  newsData:[\r\n    // {id:'1', title:'Title1', content:'dit is wat tekst 1',date:'2016-01-04 10:34:23', user:'1'},\r\n    // {id:'2', title:'Title2', content:'dit is wat tekst 2',date:'2016-01-04 10:34:23',user:'2'}\r\n    ],\r\n// newsData:[],\r\n    status:'idle',\r\n    error: null\r\n}\r\n\r\n\r\n\r\n\r\n\r\n//api geven\r\nexport const getNews=createAsyncThunk(\r\n    \r\n    'news/getNews',\r\n    async()=>{   \r\n  const dispath = useDispatch()\r\n\r\n        try {\r\n            const response =  await fetch('https://www.vrt.be/vrtnws/nl/regio/_jcr_content/par/grid.app.json'); \r\n            const data = await response.json();\r\n            initialState.newsData.push(data[0])\r\n            console.log('url data: ',data,initialState.newsData)\r\n            dispath(dataAdded(data))\r\n            return data\r\n            \r\n           \r\n        } catch (err) {\r\n            // Handle Error Here\r\n            console.error(err);\r\n        }\r\n    }\r\n);\r\n\r\n//posts object\r\n\r\n\r\nconst postsSlice = createSlice({\r\n    name:'news',\r\n    initialState,\r\n    reducers:{\r\n\r\n        dataAdded: {\r\n            reducer(state, action){\r\n                console.log('action.payload',action.payload);\r\n            state.newsData = [...state.newsData, action.payload]\r\n            }\r\n        },\r\n\r\n        // postAdded: {\r\n        //     reducer(state, action){\r\n        //     state.newsData.push(action.payload)\r\n        //     },\r\n        //     prepare(title, content,userId){\r\n        //         return{\r\n        //             payload:{\r\n        //                 id:nanoid(),\r\n        //                 title,\r\n        //                 content,\r\n        //                 date:new Date().toISOString(),\r\n        //                 user:userId\r\n        //             }\r\n        //         }\r\n        //     }\r\n        // },\r\n\r\n\r\n        // postAdded(state, action){\r\n        //     // state:huidige state\r\n        //     state.push(action.payload)\r\n        // },\r\n\r\n        postUpdated(state, action){\r\n            // in action.payload.id, .title, .content\r\n            const {id, title, content}= action.payload\r\n            const existingPost = state.news.find(post => post.id===id)\r\n\r\n            if(existingPost){\r\n                existingPost.title=title;\r\n                existingPost.content=content;\r\n            }\r\n\r\n        }\r\n    }\r\n})\r\n\r\nexport const {postAdded,postUpdated, dataAdded} = postsSlice.actions\r\nexport default postsSlice.reducer\r\n\r\nexport const selectAllNews= state =>state.news.newsData\r\nexport const selectPostById = (state, postId) =>state.news.newsData.find(post => post.id === postId)\r\n"]},"metadata":{},"sourceType":"module"}