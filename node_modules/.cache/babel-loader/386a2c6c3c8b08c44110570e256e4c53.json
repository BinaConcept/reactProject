{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createAsyncThunk, createSlice, nanoid } from \"@reduxjs/toolkit\";\nimport { useDispatch } from \"react-redux\";\nconst initialState = {\n  newsData: [// {id:'1', title:'Title1', content:'dit is wat tekst 1',date:'2016-01-04 10:34:23', user:'1'},\n    // {id:'2', title:'Title2', content:'dit is wat tekst 2',date:'2016-01-04 10:34:23',user:'2'}\n  ],\n  // newsData:[],\n  status: 'idle',\n  error: null\n};\nconst url = 'https://www.vrt.be/vrtnws/nl/regio/_jcr_content/par/grid.app.json'; //api geven\n\nexport const getNews = _s(createAsyncThunk('news/getNews', _s(async () => {\n  _s();\n\n  const dispath = useDispatch();\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    dispath(postAdded(title, content, userId));\n    console.log('url data: ', data);\n    return data;\n  } catch (err) {\n    // Handle Error Here\n    console.error(err);\n  }\n}, \"QtPkhNWsepujoPwNLLhqBxhGDTw=\", false, function () {\n  return [useDispatch];\n})), \"QtPkhNWsepujoPwNLLhqBxhGDTw=\", false, function () {\n  return [useDispatch];\n}); //posts object\n\nconst postsSlice = createSlice({\n  name: 'news',\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer(state, action) {\n        state.newsData.push(action.payload);\n      },\n\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            date: new Date().toISOString(),\n            user: userId\n          }\n        };\n      }\n\n    },\n\n    newsAdded(state, action) {\n      // state.newsData.push(action.payload)\n      // state:huidige state\n      console.log('newsAdded =', action); // state.push(action.payload)\n    },\n\n    postUpdated(state, action) {\n      // in action.payload.id, .title, .content\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.news.find(post => post.id === id);\n\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n\n  }\n});\nexport const {\n  postAdded,\n  postUpdated,\n  newsAdded\n} = postsSlice.actions;\nexport default postsSlice.reducer;\nexport const selectAllNews = state => state.news.newsData;\nexport const selectPostById = (state, postId) => state.news.newsData.find(post => post.id === postId);","map":{"version":3,"sources":["D:/Thomas More/Bacholer/React/Projecten/project_2/src/features/postsSlice.js"],"names":["createAsyncThunk","createSlice","nanoid","useDispatch","initialState","newsData","status","error","url","getNews","dispath","response","fetch","data","json","postAdded","title","content","userId","console","log","err","postsSlice","name","reducers","reducer","state","action","push","payload","prepare","id","date","Date","toISOString","user","newsAdded","postUpdated","existingPost","news","find","post","actions","selectAllNews","selectPostById","postId"],"mappings":"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","sourcesContent":["import {createAsyncThunk, createSlice, nanoid} from \"@reduxjs/toolkit\"\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst initialState = {\r\n    \r\n  newsData:[\r\n    // {id:'1', title:'Title1', content:'dit is wat tekst 1',date:'2016-01-04 10:34:23', user:'1'},\r\n    // {id:'2', title:'Title2', content:'dit is wat tekst 2',date:'2016-01-04 10:34:23',user:'2'}\r\n    ],\r\n// newsData:[],\r\n    status:'idle',\r\n    error: null\r\n\r\n  \r\n}\r\nconst url='https://www.vrt.be/vrtnws/nl/regio/_jcr_content/par/grid.app.json';\r\n//api geven\r\n  \r\nexport const getNews=createAsyncThunk(\r\n    'news/getNews',\r\n    async()=>{   \r\n        const dispath = useDispatch();\r\n        try { \r\n            \r\n            const response =  await fetch(url); \r\n            const data = await response.json();\r\n            dispath(postAdded(title, content, userId))\r\n            console.log('url data: ',data);        \r\n            return data\r\n            \r\n           \r\n        } catch (err) {\r\n            // Handle Error Here\r\n            console.error(err);\r\n        } \r\n \r\n    }\r\n);\r\n\r\n\r\n\r\n//posts object\r\n\r\n\r\nconst postsSlice = createSlice({\r\n    name:'news',\r\n    initialState,\r\n    reducers:{\r\n\r\n\r\n\r\n        postAdded: {\r\n            reducer(state, action){\r\n            state.newsData.push(action.payload)\r\n            },\r\n            prepare(title, content,userId){\r\n                return{\r\n                    payload:{\r\n                        id:nanoid(),\r\n                        title,\r\n                        content,\r\n                        date:new Date().toISOString(),\r\n                        user:userId\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        newsAdded(state, action){\r\n            // state.newsData.push(action.payload)\r\n            // state:huidige state\r\n            console.log('newsAdded =',action)\r\n            // state.push(action.payload)\r\n        },\r\n\r\n        postUpdated(state, action){\r\n            // in action.payload.id, .title, .content\r\n            const {id, title, content}= action.payload\r\n            const existingPost = state.news.find(post => post.id===id)\r\n\r\n            if(existingPost){\r\n                existingPost.title=title;\r\n                existingPost.content=content;\r\n            }\r\n\r\n        }\r\n    }\r\n})\r\n\r\nexport const {postAdded,postUpdated,newsAdded} = postsSlice.actions\r\nexport default postsSlice.reducer\r\n\r\nexport const selectAllNews= state =>state.news.newsData\r\nexport const selectPostById = (state, postId) =>state.news.newsData.find(post => post.id === postId)\r\n"]},"metadata":{},"sourceType":"module"}