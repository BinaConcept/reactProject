{"ast":null,"code":"import { createSlice, nanoid } from \"@reduxjs/toolkit\";\nconst initialState = [{\n  id: '1',\n  title: 'Title1',\n  content: 'dit is wat tekst 1',\n  date: '2016-01-04 10:34:23',\n  user: '1'\n}, {\n  id: '2',\n  title: 'Title2',\n  content: 'dit is wat tekst 2',\n  date: '2016-01-04 10:34:23',\n  user: '2'\n}]; //posts object\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer(state, action) {\n        state.push(action.payload);\n      },\n\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            date: new Date().toISOString(),\n            user: userId\n          }\n        };\n      }\n\n    },\n\n    // postAdded(state, action){\n    //     // state:huidige state\n    //     state.push(action.payload)\n    // },\n    postUpdated(state, action) {\n      // in action.payload.id, .title, .content\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.find(post => post.id === id);\n\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n\n  }\n});\nexport const {\n  postAdded,\n  postUpdated\n} = postsSlice.actions;\nexport default postsSlice.reducer;\nexport const selectAllPosts = state => state.posts;\nexport const selectPostById = (state, postId) => state.posts; // video 1:40","map":{"version":3,"sources":["D:/Thomas More/Bacholer/React/Projecten/project_2/src/features/postsSlice.js"],"names":["createSlice","nanoid","initialState","id","title","content","date","user","postsSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","userId","Date","toISOString","postUpdated","existingPost","find","post","actions","selectAllPosts","posts","selectPostById","postId"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,MAArB,QAAkC,kBAAlC;AAGA,MAAMC,YAAY,GAAE,CAChB;AAACC,EAAAA,EAAE,EAAC,GAAJ;AAASC,EAAAA,KAAK,EAAC,QAAf;AAAyBC,EAAAA,OAAO,EAAC,oBAAjC;AAAsDC,EAAAA,IAAI,EAAC,qBAA3D;AAAkFC,EAAAA,IAAI,EAAC;AAAvF,CADgB,EAEhB;AAACJ,EAAAA,EAAE,EAAC,GAAJ;AAASC,EAAAA,KAAK,EAAC,QAAf;AAAyBC,EAAAA,OAAO,EAAC,oBAAjC;AAAsDC,EAAAA,IAAI,EAAC,qBAA3D;AAAiFC,EAAAA,IAAI,EAAC;AAAtF,CAFgB,CAApB,C,CAKA;;AAGA,MAAMC,UAAU,GAAGR,WAAW,CAAC;AAC3BS,EAAAA,IAAI,EAAC,OADsB;AAE3BP,EAAAA,YAF2B;AAG3BQ,EAAAA,QAAQ,EAAC;AAELC,IAAAA,SAAS,EAAE;AACPC,MAAAA,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAe;AACtBD,QAAAA,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;AACC,OAHM;;AAIPC,MAAAA,OAAO,CAACb,KAAD,EAAQC,OAAR,EAAgBa,MAAhB,EAAuB;AAC1B,eAAM;AACFF,UAAAA,OAAO,EAAC;AACJb,YAAAA,EAAE,EAACF,MAAM,EADL;AAEJG,YAAAA,KAFI;AAGJC,YAAAA,OAHI;AAIJC,YAAAA,IAAI,EAAC,IAAIa,IAAJ,GAAWC,WAAX,EAJD;AAKJb,YAAAA,IAAI,EAACW;AALD;AADN,SAAN;AASH;;AAdM,KAFN;;AAmBL;AACA;AACA;AACA;AAEAG,IAAAA,WAAW,CAACR,KAAD,EAAQC,MAAR,EAAe;AACtB;AACA,YAAM;AAACX,QAAAA,EAAD;AAAKC,QAAAA,KAAL;AAAYC,QAAAA;AAAZ,UAAsBS,MAAM,CAACE,OAAnC;AACA,YAAMM,YAAY,GAAGT,KAAK,CAACU,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAACrB,EAAL,KAAUA,EAA7B,CAArB;;AAEA,UAAGmB,YAAH,EAAgB;AACZA,QAAAA,YAAY,CAAClB,KAAb,GAAmBA,KAAnB;AACAkB,QAAAA,YAAY,CAACjB,OAAb,GAAqBA,OAArB;AACH;AAEJ;;AAlCI;AAHkB,CAAD,CAA9B;AAwCA,OAAO,MAAM;AAACM,EAAAA,SAAD;AAAWU,EAAAA;AAAX,IAA0Bb,UAAU,CAACiB,OAA3C;AACP,eAAejB,UAAU,CAACI,OAA1B;AAGA,OAAO,MAAMc,cAAc,GAAEb,KAAK,IAAGA,KAAK,CAACc,KAApC;AACP,OAAO,MAAMC,cAAc,GAAC,CAACf,KAAD,EAAQgB,MAAR,KAAkBhB,KAAK,CAACc,KAA7C,C,CAEP","sourcesContent":["import {createSlice, nanoid} from \"@reduxjs/toolkit\"\r\n\r\n\r\nconst initialState =[\r\n    {id:'1', title:'Title1', content:'dit is wat tekst 1',date:'2016-01-04 10:34:23', user:'1'},\r\n    {id:'2', title:'Title2', content:'dit is wat tekst 2',date:'2016-01-04 10:34:23',user:'2'}\r\n]\r\n\r\n//posts object\r\n\r\n\r\nconst postsSlice = createSlice({\r\n    name:'posts',\r\n    initialState,\r\n    reducers:{\r\n\r\n        postAdded: {\r\n            reducer(state, action){\r\n            state.push(action.payload)\r\n            },\r\n            prepare(title, content,userId){\r\n                return{\r\n                    payload:{\r\n                        id:nanoid(),\r\n                        title,\r\n                        content,\r\n                        date:new Date().toISOString(),\r\n                        user:userId\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        // postAdded(state, action){\r\n        //     // state:huidige state\r\n        //     state.push(action.payload)\r\n        // },\r\n\r\n        postUpdated(state, action){\r\n            // in action.payload.id, .title, .content\r\n            const {id, title, content}= action.payload\r\n            const existingPost = state.find(post => post.id===id)\r\n\r\n            if(existingPost){\r\n                existingPost.title=title;\r\n                existingPost.content=content;\r\n            }\r\n\r\n        }\r\n    }\r\n})\r\nexport const {postAdded,postUpdated} = postsSlice.actions\r\nexport default postsSlice.reducer\r\n\r\n\r\nexport const selectAllPosts= state =>state.posts\r\nexport const selectPostById=(state, postId) =>state.posts\r\n\r\n// video 1:40"]},"metadata":{},"sourceType":"module"}