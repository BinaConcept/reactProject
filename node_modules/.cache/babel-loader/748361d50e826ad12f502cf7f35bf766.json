{"ast":null,"code":"import { createAsyncThunk, createSlice, nanoid } from \"@reduxjs/toolkit\";\nimport { useEffect } from \"react\";\nconst initialState = {\n  newsData: [// {id:'1', title:'Title1', content:'dit is wat tekst 1',date:'2016-01-04 10:34:23', user:'1'},\n    // {id:'2', title:'Title2', content:'dit is wat tekst 2',date:'2016-01-04 10:34:23',user:'2'}\n  ],\n  // newsData:[],\n  status: 'idle',\n  error: null\n}; //api geven\n\nexport const getNews = createAsyncThunk('news/getNews', async () => {\n  try {\n    const response = await fetch('https://www.vrt.be/vrtnws/nl/regio/_jcr_content/par/grid.app.json');\n    const data = await response.json();\n    console.log('url data: ', data);\n    postAdded(title, content, userId);\n    return data;\n  } catch (err) {\n    // Handle Error Here\n    console.error(err);\n  }\n}); //posts object\n\nconst postsSlice = createSlice({\n  name: 'news',\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer(state, action) {\n        state.newsData.push(action.payload);\n      } // prepare(title, content,userId){\n      //     return{\n      //         payload:{\n      //             id:nanoid(),\n      //             title,\n      //             content,\n      //             date:new Date().toISOString(),\n      //             user:userId\n      //         }\n      //     }\n      // }\n      // prepare(id, patch,title,description,imageUrls,tags,articleDates,liveBlogItems,isVideo,isLive,displayTag,expertDicription,video){\n      //         return{\n      //             payload:{\n      //                 id,\n      //                 patch,\n      //                 title,\n      //                 description,\n      //                 imageUrls,\n      //                 articleDates,\n      //                 liveBlogItems,\n      //                 isVideo,\n      //                 isLive,\n      //                 displayTag,\n      //                 expertDicription\n      //             }\n      //         }\n      //     }\n\n\n    },\n\n    // postAdded(state, action){\n    //     // state:huidige state\n    //     state.push(action.payload)\n    // },\n    postUpdated(state, action) {\n      // in action.payload.id, .title, .content\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.news.find(post => post.id === id);\n\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n\n  }\n});\nexport const {\n  postAdded,\n  postUpdated\n} = postsSlice.actions;\nexport default postsSlice.reducer;\nexport const selectAllNews = state => state.news.newsData;\nexport const selectPostById = (state, postId) => state.news.newsData.find(post => post.id === postId);","map":{"version":3,"sources":["D:/Thomas More/Bacholer/React/Projecten/project_2/src/features/postsSlice.js"],"names":["createAsyncThunk","createSlice","nanoid","useEffect","initialState","newsData","status","error","getNews","response","fetch","data","json","console","log","postAdded","title","content","userId","err","postsSlice","name","reducers","reducer","state","action","push","payload","postUpdated","id","existingPost","news","find","post","actions","selectAllNews","selectPostById","postId"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,EAAuCC,MAAvC,QAAoD,kBAApD;AAEA,SAAQC,SAAR,QAAwB,OAAxB;AAGA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAC,CACP;AACA;AAFO,GADU;AAKrB;AACIC,EAAAA,MAAM,EAAC,MANU;AAOjBC,EAAAA,KAAK,EAAE;AAPU,CAArB,C,CAUA;;AACA,OAAO,MAAMC,OAAO,GAACR,gBAAgB,CACjC,cADiC,EAEjC,YAAS;AACL,MAAI;AACA,UAAMS,QAAQ,GAAI,MAAMC,KAAK,CAAC,mEAAD,CAA7B;AACA,UAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyBH,IAAzB;AACAI,IAAAA,SAAS,CAACC,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,CAAT;AAEA,WAAOP,IAAP;AAGH,GATD,CASE,OAAOQ,GAAP,EAAY;AACV;AACAN,IAAAA,OAAO,CAACN,KAAR,CAAcY,GAAd;AACH;AACJ,CAhBgC,CAA9B,C,CAoBP;;AAGA,MAAMC,UAAU,GAAGnB,WAAW,CAAC;AAC3BoB,EAAAA,IAAI,EAAC,MADsB;AAE3BjB,EAAAA,YAF2B;AAG3BkB,EAAAA,QAAQ,EAAC;AAELP,IAAAA,SAAS,EAAE;AACPQ,MAAAA,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAe;AACtBD,QAAAA,KAAK,CAACnB,QAAN,CAAeqB,IAAf,CAAoBD,MAAM,CAACE,OAA3B;AACC,OAHM,CAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAjCO,KAFN;;AAsCL;AACA;AACA;AACA;AAEAC,IAAAA,WAAW,CAACJ,KAAD,EAAQC,MAAR,EAAe;AACtB;AACA,YAAM;AAACI,QAAAA,EAAD;AAAKb,QAAAA,KAAL;AAAYC,QAAAA;AAAZ,UAAsBQ,MAAM,CAACE,OAAnC;AACA,YAAMG,YAAY,GAAGN,KAAK,CAACO,IAAN,CAAWC,IAAX,CAAgBC,IAAI,IAAIA,IAAI,CAACJ,EAAL,KAAUA,EAAlC,CAArB;;AAEA,UAAGC,YAAH,EAAgB;AACZA,QAAAA,YAAY,CAACd,KAAb,GAAmBA,KAAnB;AACAc,QAAAA,YAAY,CAACb,OAAb,GAAqBA,OAArB;AACH;AAEJ;;AArDI;AAHkB,CAAD,CAA9B;AA4DA,OAAO,MAAM;AAACF,EAAAA,SAAD;AAAWa,EAAAA;AAAX,IAA0BR,UAAU,CAACc,OAA3C;AACP,eAAed,UAAU,CAACG,OAA1B;AAEA,OAAO,MAAMY,aAAa,GAAEX,KAAK,IAAGA,KAAK,CAACO,IAAN,CAAW1B,QAAxC;AACP,OAAO,MAAM+B,cAAc,GAAG,CAACZ,KAAD,EAAQa,MAAR,KAAkBb,KAAK,CAACO,IAAN,CAAW1B,QAAX,CAAoB2B,IAApB,CAAyBC,IAAI,IAAIA,IAAI,CAACJ,EAAL,KAAYQ,MAA7C,CAAzC","sourcesContent":["import {createAsyncThunk, createSlice, nanoid} from \"@reduxjs/toolkit\"\r\n\r\nimport {useEffect} from \"react\";\r\n\r\n\r\nconst initialState = {\r\n  newsData:[\r\n    // {id:'1', title:'Title1', content:'dit is wat tekst 1',date:'2016-01-04 10:34:23', user:'1'},\r\n    // {id:'2', title:'Title2', content:'dit is wat tekst 2',date:'2016-01-04 10:34:23',user:'2'}\r\n    ],\r\n// newsData:[],\r\n    status:'idle',\r\n    error: null\r\n}\r\n\r\n//api geven\r\nexport const getNews=createAsyncThunk(\r\n    'news/getNews',\r\n    async()=>{      \r\n        try {\r\n            const response =  await fetch('https://www.vrt.be/vrtnws/nl/regio/_jcr_content/par/grid.app.json'); \r\n            const data = await response.json();\r\n            console.log('url data: ',data)\r\n            postAdded(title, content, userId)\r\n\r\n            return data\r\n            \r\n           \r\n        } catch (err) {\r\n            // Handle Error Here\r\n            console.error(err);\r\n        }\r\n    }\r\n);\r\n\r\n\r\n//posts object\r\n\r\n\r\nconst postsSlice = createSlice({\r\n    name:'news',\r\n    initialState,\r\n    reducers:{\r\n\r\n        postAdded: {\r\n            reducer(state, action){\r\n            state.newsData.push(action.payload)\r\n            },\r\n            // prepare(title, content,userId){\r\n            //     return{\r\n            //         payload:{\r\n            //             id:nanoid(),\r\n            //             title,\r\n            //             content,\r\n            //             date:new Date().toISOString(),\r\n            //             user:userId\r\n            //         }\r\n            //     }\r\n            // }\r\n            // prepare(id, patch,title,description,imageUrls,tags,articleDates,liveBlogItems,isVideo,isLive,displayTag,expertDicription,video){\r\n            //         return{\r\n            //             payload:{\r\n\r\n            //                 id,\r\n            //                 patch,\r\n            //                 title,\r\n            //                 description,\r\n            //                 imageUrls,\r\n            //                 articleDates,\r\n            //                 liveBlogItems,\r\n            //                 isVideo,\r\n            //                 isLive,\r\n            //                 displayTag,\r\n            //                 expertDicription\r\n                           \r\n            //             }\r\n            //         }\r\n            //     }\r\n        },\r\n\r\n        // postAdded(state, action){\r\n        //     // state:huidige state\r\n        //     state.push(action.payload)\r\n        // },\r\n\r\n        postUpdated(state, action){\r\n            // in action.payload.id, .title, .content\r\n            const {id, title, content}= action.payload\r\n            const existingPost = state.news.find(post => post.id===id)\r\n\r\n            if(existingPost){\r\n                existingPost.title=title;\r\n                existingPost.content=content;\r\n            }\r\n\r\n        }\r\n    }\r\n})\r\n\r\nexport const {postAdded,postUpdated} = postsSlice.actions\r\nexport default postsSlice.reducer\r\n\r\nexport const selectAllNews= state =>state.news.newsData\r\nexport const selectPostById = (state, postId) =>state.news.newsData.find(post => post.id === postId)\r\n"]},"metadata":{},"sourceType":"module"}