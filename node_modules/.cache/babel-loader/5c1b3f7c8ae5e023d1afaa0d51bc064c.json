{"ast":null,"code":"import { createSlice, nanoid } from \"@reduxjs/toolkit\";\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nconst initialState = {\n  newsData: [],\n  status: 'idle',\n  error: null\n};\n\ncreateNotification = type => {\n  return () => {\n    switch (type) {\n      case 'info':\n        NotificationManager.info('Info message');\n        break;\n\n      case 'success':\n        NotificationManager.success('Success message', 'Title here');\n        break;\n\n      case 'warning':\n        NotificationManager.warning('Warning message', 'Close after 3000ms', 3000);\n        break;\n\n      case 'error':\n        NotificationManager.error('Error message', 'Click me!', 5000, () => {\n          alert('callback');\n        });\n        break;\n    }\n  };\n}; //api geven\n\n\nexport const getNews = () => async dispatch => {\n  try {\n    //   const res = await fetch(`https://www.vrt.be/vrtnws/nl/regio/_jcr_content/par/grid.app.json`);\n    const response = await axios.get(`https://www.vrt.be/vrtnws/nl/regio/_jcr_content/par/grid.app.json`);\n    dispatch(allNewsItems(response.data));\n  } catch (err) {//   dispatch(getUserListFailure(err.message));\n  }\n};\nconst postsSlice = createSlice({\n  name: 'news',\n  initialState,\n  reducers: {\n    newsPost: {\n      reducer(state, action) {\n        state.newsData.push(action.payload);\n        toast(\"Nieuws artikel aangemaakt\");\n      },\n\n      prepare(imageUrls, display, title, discription, subtitle, content) {\n        return {\n          payload: {\n            id: nanoid(),\n            imageUrls: '/assets/images/' + imageUrls.name,\n            content,\n            title,\n            discription,\n            subtitle,\n            articleDates: new Date().toISOString(),\n            displayTag: display\n          }\n        };\n      }\n\n    },\n\n    newsUpdated(state, action) {\n      const {\n        id,\n        imagePath,\n        display,\n        title,\n        discription,\n        subtitle,\n        content\n      } = action.payload;\n      const existingPost = state.newsData.find(post => post.id === id);\n\n      if (existingPost) {\n        existingPost.imageUrls = imagePath;\n        existingPost.displayTag = display;\n        existingPost.title = title;\n        existingPost.discription = discription;\n        existingPost.subtitle = subtitle;\n        existingPost.content = content;\n      }\n    },\n\n    newsDelete(state, action) {\n      const {\n        id\n      } = action.payload;\n      state.newsData = state.newsData.filter(ne => ne.id !== id);\n      toast(\"Nieuws gewist\");\n    },\n\n    allNewsItems(state, action) {\n      var ids = new Set(state.newsData.map(d => d.ID));\n      state.newsData = [...state.newsData, ...action.payload.filter(d => !ids.has(d.ID))]; //  toast(\"Alle bestand zijn opgehaal\");\n    }\n\n  }\n});\nexport const {\n  postAdded,\n  newsUpdated,\n  allNewsItems,\n  newsPost,\n  newsDelete\n} = postsSlice.actions;\nexport default postsSlice.reducer;\nexport const selectAllNews = state => state.news.newsData;\nexport const selectNewsById = (state, Id) => state.news.newsData.find(news => news.id === Id);","map":{"version":3,"sources":["D:/Thomas More/Bacholer/React/Projecten/project_2/src/features/postsSlice.js"],"names":["createSlice","nanoid","axios","toast","initialState","newsData","status","error","createNotification","type","NotificationManager","info","success","warning","alert","getNews","dispatch","response","get","allNewsItems","data","err","postsSlice","name","reducers","newsPost","reducer","state","action","push","payload","prepare","imageUrls","display","title","discription","subtitle","content","id","articleDates","Date","toISOString","displayTag","newsUpdated","imagePath","existingPost","find","post","newsDelete","filter","ne","ids","Set","map","d","ID","has","postAdded","actions","selectAllNews","news","selectNewsById","Id"],"mappings":"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","sourcesContent":["import { createSlice, nanoid} from \"@reduxjs/toolkit\"\r\nimport axios from 'axios';\r\n\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst initialState = {\r\n\r\n newsData:[],\r\n    status:'idle',\r\n    error: null\r\n}\r\ncreateNotification = (type) => {\r\n    return () => {\r\n      switch (type) {\r\n        case 'info':\r\n          NotificationManager.info('Info message');\r\n          break;\r\n        case 'success':\r\n          NotificationManager.success('Success message', 'Title here');\r\n          break;\r\n        case 'warning':\r\n          NotificationManager.warning('Warning message', 'Close after 3000ms', 3000);\r\n          break;\r\n        case 'error':\r\n          NotificationManager.error('Error message', 'Click me!', 5000, () => {\r\n            alert('callback');\r\n          });\r\n          break;\r\n      }\r\n    };\r\n}\r\n//api geven\r\n\r\nexport const getNews = () => async dispatch => {\r\n    try {\r\n    //   const res = await fetch(`https://www.vrt.be/vrtnws/nl/regio/_jcr_content/par/grid.app.json`);\r\n    const response = await axios.get(`https://www.vrt.be/vrtnws/nl/regio/_jcr_content/par/grid.app.json`);\r\n    \r\n      dispatch(allNewsItems(response.data));\r\n      \r\n    } catch (err) {\r\n    //   dispatch(getUserListFailure(err.message));\r\n    }\r\n  }\r\n\r\n\r\n\r\n  \r\nconst postsSlice = createSlice({\r\n    name:'news',\r\n    initialState,\r\n    reducers:{\r\n\r\n\r\n        newsPost: {\r\n            reducer(state, action){\r\n            state.newsData.push(action.payload)\r\n            toast(\"Nieuws artikel aangemaakt\");\r\n            },\r\n            prepare(imageUrls, display, title,discription,subtitle,content){\r\n               \r\n                return{\r\n                    payload:{\r\n                        id:nanoid(),\r\n                        imageUrls:'/assets/images/'+imageUrls.name,\r\n                        content,\r\n                        title,\r\n                        discription,\r\n                        subtitle,\r\n                        articleDates:new Date().toISOString(),\r\n                        displayTag:display\r\n                    }\r\n                 \r\n                }\r\n                \r\n            }\r\n        },\r\n\r\n        newsUpdated(state, action){  \r\n            const {id, imagePath, display, title, discription, subtitle, content}= action.payload       \r\n            const existingPost = state.newsData.find(post => post.id===id)\r\n\r\n            if(existingPost){\r\n                existingPost.imageUrls=imagePath;\r\n                existingPost.displayTag=display;\r\n                existingPost.title=title;\r\n                existingPost.discription=discription;\r\n                existingPost.subtitle=subtitle;\r\n                existingPost.content=content;\r\n\r\n            }\r\n            \r\n        },\r\n\r\n        newsDelete(state, action){  \r\n            const {id}= action.payload \r\n            state.newsData = state.newsData.filter(ne=>ne.id !== id);\r\n            toast(\"Nieuws gewist\");\r\n      \r\n        },\r\n        \r\n        allNewsItems(state, action){\r\n            var ids = new Set(state.newsData.map(d => d.ID));\r\n             state.newsData =[...state.newsData,...action.payload.filter(d => !ids.has(d.ID))];\r\n            //  toast(\"Alle bestand zijn opgehaal\");\r\n        },\r\n    }\r\n\r\n}\r\n\r\n)\r\n\r\nexport const {postAdded,newsUpdated,allNewsItems,newsPost,newsDelete} = postsSlice.actions\r\nexport default postsSlice.reducer\r\n\r\n\r\nexport const selectAllNews= state =>state.news.newsData \r\nexport const selectNewsById = (state, Id) =>state.news.newsData.find(news => news.id === Id)\r\n\r\n"]},"metadata":{},"sourceType":"module"}