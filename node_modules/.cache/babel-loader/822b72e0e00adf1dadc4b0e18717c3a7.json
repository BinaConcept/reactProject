{"ast":null,"code":"import { createAsyncThunk, createSlice, nanoid } from \"@reduxjs/toolkit\";\nconst initialState = {\n  newsData: [{\n    id: '1',\n    title: 'Title1',\n    content: 'dit is wat tekst 1',\n    date: '2016-01-04 10:34:23',\n    user: '1'\n  }, {\n    id: '2',\n    title: 'Title2',\n    content: 'dit is wat tekst 2',\n    date: '2016-01-04 10:34:23',\n    user: '2'\n  }],\n  // newsData:[],\n  status: 'idle',\n  error: null\n};\nconst [news, setNews] = useState(''); //api geven\n\nexport const getNews = createAsyncThunk('news/getNews', async () => {\n  try {\n    const response = await fetch('https://www.vrt.be/vrtnws/nl/regio/_jcr_content/par/grid.app.json');\n    const data = await response.json();\n    console.log('url data: ', data);\n    initialState.newsData = data;\n    return data;\n  } catch (err) {\n    // Handle Error Here\n    console.error(err);\n  }\n}); //posts object\n\nconst postsSlice = createSlice({\n  name: 'news',\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer(state, action) {\n        state.newsData.push(action.payload);\n      },\n\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            date: new Date().toISOString(),\n            user: userId\n          }\n        };\n      }\n\n    },\n\n    newsAdded(state, action) {\n      getNews();\n      console.log('payload= ', action.payload); // state:huidige state\n      // state.push(action.payload)\n    },\n\n    // postAdded(state, action){\n    //     // state:huidige state\n    //     state.push(action.payload)\n    // },\n    postUpdated(state, action) {\n      // in action.payload.id, .title, .content\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.news.find(post => post.id === id);\n\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n\n  }\n});\nexport const {\n  postAdded,\n  postUpdated,\n  newsAdded\n} = postsSlice.actions;\nexport default postsSlice.reducer;\nexport const selectAllNews = state => state.news.newsData;\nexport const selectPostById = (state, postId) => state.news.newsData.find(post => post.id === postId);","map":{"version":3,"sources":["D:/Thomas More/Bacholer/React/Projecten/project_2/src/features/postsSlice.js"],"names":["createAsyncThunk","createSlice","nanoid","initialState","newsData","id","title","content","date","user","status","error","news","setNews","useState","getNews","response","fetch","data","json","console","log","err","postsSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","userId","Date","toISOString","newsAdded","postUpdated","existingPost","find","post","actions","selectAllNews","selectPostById","postId"],"mappings":"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","sourcesContent":["import {createAsyncThunk, createSlice, nanoid} from \"@reduxjs/toolkit\"\r\n\r\n\r\nconst initialState = {\r\n  newsData:[\r\n    {id:'1', title:'Title1', content:'dit is wat tekst 1',date:'2016-01-04 10:34:23', user:'1'},\r\n    {id:'2', title:'Title2', content:'dit is wat tekst 2',date:'2016-01-04 10:34:23',user:'2'}\r\n    ],\r\n// newsData:[],\r\n    status:'idle',\r\n    error: null\r\n}\r\n\r\nconst [news, setNews] = useState('')\r\n//api geven\r\nexport const getNews=createAsyncThunk(\r\n    'news/getNews',\r\n    async()=>{      \r\n        try {\r\n            const response =  await fetch('https://www.vrt.be/vrtnws/nl/regio/_jcr_content/par/grid.app.json'); \r\n            const data = await response.json();\r\n            console.log('url data: ',data)\r\n            initialState.newsData=data\r\n            return data\r\n            \r\n           \r\n        } catch (err) {\r\n            // Handle Error Here\r\n            console.error(err);\r\n        }\r\n    }\r\n);\r\n\r\n//posts object\r\n\r\n\r\nconst postsSlice = createSlice({\r\n    name:'news',\r\n    initialState,\r\n    reducers:{\r\n\r\n\r\n        postAdded: {\r\n            reducer(state, action){\r\n            state.newsData.push(action.payload)\r\n            },\r\n            prepare(title, content,userId){\r\n                return{\r\n                    payload:{\r\n                        id:nanoid(),\r\n                        title,\r\n                        content,\r\n                        date:new Date().toISOString(),\r\n                        user:userId\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        newsAdded(state, action){\r\n            getNews()\r\n            console.log('payload= ',action.payload)\r\n            // state:huidige state\r\n            // state.push(action.payload)\r\n        },\r\n        // postAdded(state, action){\r\n        //     // state:huidige state\r\n        //     state.push(action.payload)\r\n        // },\r\n\r\n        postUpdated(state, action){\r\n            // in action.payload.id, .title, .content\r\n            const {id, title, content}= action.payload\r\n            const existingPost = state.news.find(post => post.id===id)\r\n\r\n            if(existingPost){\r\n                existingPost.title=title;\r\n                existingPost.content=content;\r\n            }\r\n\r\n        }\r\n    }\r\n})\r\n\r\nexport const {postAdded,postUpdated,newsAdded} = postsSlice.actions\r\nexport default postsSlice.reducer\r\n\r\nexport const selectAllNews= state =>state.news.newsData\r\nexport const selectPostById = (state, postId) =>state.news.newsData.find(post => post.id === postId)\r\n"]},"metadata":{},"sourceType":"module"}