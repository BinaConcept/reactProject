{"ast":null,"code":"import { createAsyncThunk, createSlice, nanoid } from \"@reduxjs/toolkit\";\nconst initialState = {\n  newsData: [],\n  status: 'idle',\n  error: null\n}; //api geven\n\nexport const getNews = createAsyncThunk('posts/getNews', async () => {\n  //const response= await client.get('fakeApi/posts')        \n  try {\n    const response = await fetch('https://www.vrt.be/vrtnws/nl/regio/_jcr_content/par/grid.app.json');\n    const data = await response.json();\n    console.log('url data: ', data);\n  } catch (err) {\n    // Handle Error Here\n    console.error(err);\n  }\n});\nconst postsSlice = createSlice({\n  name: 'news',\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer(state, action) {\n        state.newsData.push(action.payload);\n      },\n\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            date: new Date().toISOString(),\n            user: userId\n          }\n        };\n      }\n\n    },\n\n    postUpdated(state, action) {\n      // in action.payload.id, .title, .content\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.newsData.find(post => post.id === id);\n\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n\n  }\n});\nexport const {\n  postAdded,\n  postUpdated\n} = postsSlice.actions;\nexport default postsSlice.reducer;\nexport const selectAllPosts = state => state.news.newsData;\nexport const selectPostById = (state, postId) => state.news.data.find(post => post.id === postId); // export const {postAdded,postUpdated} = postsSlice.actions\n// export default postsSlice.reducer\n// export const selectAllPosts= state =>state.posts.posts\n// export const selectPostById = (state, postId) =>state.posts.posts.find(post => post.id === postId)","map":{"version":3,"sources":["D:/Thomas More/Bacholer/React/Projecten/project_2/src/features/postsSlice.js"],"names":["createAsyncThunk","createSlice","nanoid","initialState","newsData","status","error","getNews","response","fetch","data","json","console","log","err","postsSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","title","content","userId","id","date","Date","toISOString","user","postUpdated","existingPost","find","post","actions","selectAllPosts","news","selectPostById","postId"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,EAAuCC,MAAvC,QAAoD,kBAApD;AAGA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAC,EADU;AAEjBC,EAAAA,MAAM,EAAC,MAFU;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAArB,C,CAMA;;AACA,OAAO,MAAMC,OAAO,GAACP,gBAAgB,CACjC,eADiC,EAEjC,YAAS;AACL;AACA,MAAI;AACA,UAAMQ,QAAQ,GAAI,MAAMC,KAAK,CAAC,mEAAD,CAA7B;AACA,UAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyBH,IAAzB;AAEH,GALD,CAKE,OAAOI,GAAP,EAAY;AACV;AACAF,IAAAA,OAAO,CAACN,KAAR,CAAcQ,GAAd;AACH;AACJ,CAbgC,CAA9B;AAgBP,MAAMC,UAAU,GAAGd,WAAW,CAAC;AAC3Be,EAAAA,IAAI,EAAC,MADsB;AAE3Bb,EAAAA,YAF2B;AAG3Bc,EAAAA,QAAQ,EAAC;AAELC,IAAAA,SAAS,EAAE;AACPC,MAAAA,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAe;AACtBD,QAAAA,KAAK,CAAChB,QAAN,CAAekB,IAAf,CAAoBD,MAAM,CAACE,OAA3B;AACC,OAHM;;AAIPC,MAAAA,OAAO,CAACC,KAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuB;AAC1B,eAAM;AACFJ,UAAAA,OAAO,EAAC;AACJK,YAAAA,EAAE,EAAC1B,MAAM,EADL;AAEJuB,YAAAA,KAFI;AAGJC,YAAAA,OAHI;AAIJG,YAAAA,IAAI,EAAC,IAAIC,IAAJ,GAAWC,WAAX,EAJD;AAKJC,YAAAA,IAAI,EAACL;AALD;AADN,SAAN;AASH;;AAdM,KAFN;;AAqBLM,IAAAA,WAAW,CAACb,KAAD,EAAQC,MAAR,EAAe;AACtB;AACA,YAAM;AAACO,QAAAA,EAAD;AAAKH,QAAAA,KAAL;AAAYC,QAAAA;AAAZ,UAAsBL,MAAM,CAACE,OAAnC;AACA,YAAMW,YAAY,GAAGd,KAAK,CAAChB,QAAN,CAAe+B,IAAf,CAAoBC,IAAI,IAAIA,IAAI,CAACR,EAAL,KAAUA,EAAtC,CAArB;;AAEA,UAAGM,YAAH,EAAgB;AACZA,QAAAA,YAAY,CAACT,KAAb,GAAmBA,KAAnB;AACAS,QAAAA,YAAY,CAACR,OAAb,GAAqBA,OAArB;AACH;AAEJ;;AA/BI;AAHkB,CAAD,CAA9B;AAsCA,OAAO,MAAM;AAACR,EAAAA,SAAD;AAAWe,EAAAA;AAAX,IAA0BlB,UAAU,CAACsB,OAA3C;AACP,eAAetB,UAAU,CAACI,OAA1B;AAEA,OAAO,MAAMmB,cAAc,GAAElB,KAAK,IAAGA,KAAK,CAACmB,IAAN,CAAWnC,QAAzC;AACP,OAAO,MAAMoC,cAAc,GAAG,CAACpB,KAAD,EAAQqB,MAAR,KAAkBrB,KAAK,CAACmB,IAAN,CAAW7B,IAAX,CAAgByB,IAAhB,CAAqBC,IAAI,IAAIA,IAAI,CAACR,EAAL,KAAYa,MAAzC,CAAzC,C,CAIP;AACA;AAEA;AACA","sourcesContent":["import {createAsyncThunk, createSlice, nanoid} from \"@reduxjs/toolkit\"\r\n\r\n\r\nconst initialState = {\r\n  newsData:[],\r\n    status:'idle',\r\n    error: null\r\n}\r\n\r\n//api geven\r\nexport const getNews=createAsyncThunk(\r\n    'posts/getNews',\r\n    async()=>{\r\n        //const response= await client.get('fakeApi/posts')        \r\n        try {\r\n            const response =  await fetch('https://www.vrt.be/vrtnws/nl/regio/_jcr_content/par/grid.app.json'); \r\n            const data = await response.json();\r\n            console.log('url data: ',data)\r\n           \r\n        } catch (err) {\r\n            // Handle Error Here\r\n            console.error(err);\r\n        }\r\n    }\r\n);\r\n\r\nconst postsSlice = createSlice({\r\n    name:'news',\r\n    initialState,\r\n    reducers:{\r\n\r\n        postAdded: {\r\n            reducer(state, action){\r\n            state.newsData.push(action.payload)\r\n            },\r\n            prepare(title, content,userId){\r\n                return{\r\n                    payload:{\r\n                        id:nanoid(),\r\n                        title,\r\n                        content,\r\n                        date:new Date().toISOString(),\r\n                        user:userId\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n\r\n\r\n        postUpdated(state, action){\r\n            // in action.payload.id, .title, .content\r\n            const {id, title, content}= action.payload\r\n            const existingPost = state.newsData.find(post => post.id===id)\r\n\r\n            if(existingPost){\r\n                existingPost.title=title;\r\n                existingPost.content=content;\r\n            }\r\n\r\n        }\r\n    }\r\n})\r\n\r\nexport const {postAdded,postUpdated} = postsSlice.actions\r\nexport default postsSlice.reducer\r\n\r\nexport const selectAllPosts= state =>state.news.newsData\r\nexport const selectPostById = (state, postId) =>state.news.data.find(post => post.id === postId)\r\n\r\n\r\n\r\n// export const {postAdded,postUpdated} = postsSlice.actions\r\n// export default postsSlice.reducer\r\n\r\n// export const selectAllPosts= state =>state.posts.posts\r\n// export const selectPostById = (state, postId) =>state.posts.posts.find(post => post.id === postId)\r\n"]},"metadata":{},"sourceType":"module"}